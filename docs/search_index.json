[
["importando-e-exportando-dados.html", "Capítulo 4 Importando e Exportando Dados 4.1 Data Frames 4.2 BASE 4.3 Tidyverse 4.4 Outros Tipos de Dados", " Capítulo 4 Importando e Exportando Dados 4.1 Data Frames Probabelmente um dos promeiros objetos que vamos usar quando começamos usar R. Pensa num data-frame como uma planilha de Libreoffice (o excel). Os data-frame pode ser criaos como foi visto na seção anterior. O principal, é que temos varias funções para ler data-frames no R, entre elas read.csv read.csv2 read.table Agora vamos a ler dados do repositorio usando read.table, mas primeiro vamos lembrar que se tu precisar ver a ajuda da função, tem que escrever no R ?read.table. Então, agora vamos ver os argumentos da função: args(read.table) ## function (file, header = FALSE, sep = &quot;&quot;, quote = &quot;\\&quot;&#39;&quot;, dec = &quot;.&quot;, ## numerals = c(&quot;allow.loss&quot;, &quot;warn.loss&quot;, &quot;no.loss&quot;), row.names, ## col.names, as.is = !stringsAsFactors, na.strings = &quot;NA&quot;, ## colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, ## fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, ## comment.char = &quot;#&quot;, allowEscapes = FALSE, flush = FALSE, ## stringsAsFactors = default.stringsAsFactors(), fileEncoding = &quot;&quot;, ## encoding = &quot;unknown&quot;, text, skipNul = FALSE) ## NULL Aqui vem-se os valores default dos argumentos da função read.table. O terceiro argumento é sep, com valores por default = “”. df &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;) Agora vamos usar a funções head and tail para ver as primeiras e as ultimas 6 linhas do data-frame. head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 01:00 ## 3 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 02:00 ## 4 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 03:00 ## 5 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 04:00 ## 6 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 05:00 ## 7 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 06:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o NomeParÃ.metro ## 2 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 3 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 4 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 5 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 6 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 7 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - NÃ£o ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 19:00 ## 8578 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 20:00 ## 8579 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 21:00 ## 8580 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 22:00 ## 8581 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 23:00 ## 8582 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 24:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o ## 8577 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8578 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8579 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8580 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8581 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8582 95 Cid.UniversitÃ¡ria-USP-Ipen ## NomeParÃ.metro UnidadedeMedida MediaHoraria MediaMovel ## 8577 NOx (Ã“xidos de NitrogÃªnio) ppb 3 - ## 8578 NOx (Ã“xidos de NitrogÃªnio) ppb 8 - ## 8579 NOx (Ã“xidos de NitrogÃªnio) ppb 11 - ## 8580 NOx (Ã“xidos de NitrogÃªnio) ppb 11 - ## 8581 NOx (Ã“xidos de NitrogÃªnio) ppb 16 - ## 8582 NOx (Ã“xidos de NitrogÃªnio) ppb NA - ## Valido ## 8577 Sim ## 8578 Sim ## 8579 Sim ## 8580 Sim ## 8581 Sim ## 8582 Sim Agora vamos ler os mesmos dados com outro formato e testar e read.table funciona do mesmo jeito df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;) # Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : # linha 1 não tinha 6 elementos Vemos a mensagem de error, mas o que quer dizer. Se tu recever um banco de dados tipo .txt e quer abrir no R… ABRE ELE COM BLOCO DE NOTAS PRIMEIRO!!! O primeiro arquivo: O segundo arquivo é: qual é a diferença? Como vemos o segundo arquivo tem separação de “;”, entao, temos que lero arquivo assim: df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;, sep = &quot;;&quot;) head(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 01:00 ## 3 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 02:00 ## 4 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 03:00 ## 5 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 04:00 ## 6 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 05:00 ## 7 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 06:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o NomeParÃ.metro ## 2 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 3 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 4 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 5 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 6 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 7 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - NÃ£o ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 19:00 ## 8578 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 20:00 ## 8579 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 21:00 ## 8580 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 22:00 ## 8581 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 23:00 ## 8582 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2015 24:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o ## 8577 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8578 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8579 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8580 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8581 95 Cid.UniversitÃ¡ria-USP-Ipen ## 8582 95 Cid.UniversitÃ¡ria-USP-Ipen ## NomeParÃ.metro UnidadedeMedida MediaHoraria MediaMovel ## 8577 NOx (Ã“xidos de NitrogÃªnio) ppb 3 - ## 8578 NOx (Ã“xidos de NitrogÃªnio) ppb 8 - ## 8579 NOx (Ã“xidos de NitrogÃªnio) ppb 11 - ## 8580 NOx (Ã“xidos de NitrogÃªnio) ppb 11 - ## 8581 NOx (Ã“xidos de NitrogÃªnio) ppb 16 - ## 8582 NOx (Ã“xidos de NitrogÃªnio) ppb NA - ## Valido ## 8577 Sim ## 8578 Sim ## 8579 Sim ## 8580 Sim ## 8581 Sim ## 8582 Sim Qua dificultades tu já enfrentou importando dados? 4.2 BASE 4.2.1 Exportando texto com write.table Exportar é bem facil, mas se sabemos os argumentos das funções, vai ser mais eficiente ainda. Vamos write.table args(write.table) ## function (x, file = &quot;&quot;, append = FALSE, quote = TRUE, sep = &quot; &quot;, ## eol = &quot;\\n&quot;, na = &quot;NA&quot;, dec = &quot;.&quot;, row.names = TRUE, col.names = TRUE, ## qmethod = c(&quot;escape&quot;, &quot;double&quot;), fileEncoding = &quot;&quot;) ## NULL Se temos um data-frame com colunas de classe character, quote = TRUE quer dizer que o arquivo de texto resultante vai ter aspas nas colunas de caracter. sep é como vão ser separadas as colunas. Se tu quer abrir o arquivo com Excel, poderia separar com “,”, “;”, &quot; “,”“… Depende como tu quer. eol quer dizer end of line, e é para ver a forma de colocar o “end of line” row.names.. esta TRUE mas SEMPRE SEMPRE SEMPRE COLOCA: row.names = FALSE. Se não, R vai adiiconar uma coluna com os indices das linhas…. col.names se tu quer o nome nas colunas… PRATICA! 4.2.2 Exportando objetos com save args(save) ## function (..., list = character(), file = stop(&quot;&#39;file&#39; must be specified&quot;), ## ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), ## compression_level, eval.promises = TRUE, precheck = TRUE) ## NULL save salva o objeto com a extensão .rda. Para carregar de volta o objeto, tem que ser feito com a função load args(load) ## function (file, envir = parent.frame(), verbose = FALSE) ## NULL O que pode ser ruim, porque as vezes tu esqueceu o nome do objeto no ambiente de R. Por exemplo, tu salvou o arquivo save(frenteFria, file = &quot;FrenteQuente.rda&quot;) logo tu carrega load(&quot;FrenteQuente.rda&quot;) acreditando que vai ter tua frente quente, mas o nome do objeto no ambiente de R é frenteDria… então, tem que ficar de olho, e como somos imperfeito, vai dar merda…. O melhor da função é que permite salvar com tipos de compressão, por exemplo compress = “xz”. 4.2.3 Exportando objetos com saveRDS Esta é uma das minhas funçoes favoritas no R args(saveRDS) ## function (object, file = &quot;&quot;, ascii = FALSE, version = NULL, compress = TRUE, ## refhook = NULL) ## NULL e args(readRDS) ## function (file, refhook = NULL) ## NULL Tu consegue salvar o objeto R de forma serializada e compactada com o argumento compress mas o melhor é quando vai chamar o objeto de volta ao R. Agora tu usa o readRDS e coloca o nome que tu quiser. saveRDS(FrenteQuente, &quot;FrenteQuente.rds&quot;) frenteQ &lt;- readRDS(&quot;FremteQuente.rds&quot;) 4.2.4 Processando nossa data-frame Tem numeroas formas e pacotes para ordenar, arrangiar (Arrange), mutar e cambiar as data-frames. As mais conhecidas são provablemente do universe tidyverse com o famoso pacote dplyr. Mas, nesta curso vamos focar em base. Vamos então revisar a classe de cada columna do nosso data-frame com a função sapply, apresentada em outro capitulo, mas se quiser, da uma olhada em ?sapply. sapply(df, class) ## TipodeRede TipodeMonitoramento Tipo ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## Data Hora CodigoEstaÃ.Ã.o ## &quot;factor&quot; &quot;factor&quot; &quot;integer&quot; ## NomeEstaÃ.Ã.o NomeParÃ.metro UnidadedeMedida ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## MediaHoraria MediaMovel Valido ## &quot;integer&quot; &quot;factor&quot; &quot;factor&quot; Quando nos trabalhamos com series de tempo, é importante ter a variabel de tempo reconhecida como “tempo”, especificamente como classe “POSIXct”. Mas, a classe de Data é “factor” e de Hora tambem “factor”, o que é ruim. Então, vamos criar uma variabel de tempo mais standard com formato 2018-05-31 22:09:04. Para isso temos que grudar as variabel Data e Hora. Faremios isso numa nova varaibel chamada tempo_char, adicionando ela diretamente no df com o cifrão DOLLAR $. O grude pode ser feito com as funções paste ou paste0. df$tempo_char &lt;- paste(df$Data, df$Hora) head(df$tempo_char) ## [1] &quot;01/01/2014 01:00&quot; &quot;01/01/2014 02:00&quot; &quot;01/01/2014 03:00&quot; ## [4] &quot;01/01/2014 04:00&quot; &quot;01/01/2014 05:00&quot; &quot;01/01/2014 06:00&quot; class(df$tempo_char) ## [1] &quot;character&quot; Esta melhorando mas ainda tem clase character. Para convertir a nossa classe POSIXct podemos usar a função as.POSIXct (olha as.POSIXct). Seus argumentos são: args(as.POSIXct) ## function (x, tz = &quot;&quot;, ...) ## NULL Então, vamos criar outra variabel tempo o formato POSIXct df$tempo &lt;- as.POSIXct(x = df$tempo_char, tz = &quot;Americas/Sao_Paulo&quot;, format = &quot;%d/%m/%Y %H:%M&quot;) ## Warning in strptime(x, format, tz = tz): unknown timezone &#39;Americas/ ## Sao_Paulo&#39; ## Warning in as.POSIXct.POSIXlt(as.POSIXlt(x, tz, ...), tz, ...): unknown ## timezone &#39;Americas/Sao_Paulo&#39; head(df$tempo) ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; ## [1] &quot;2014-01-01 01:00:00 GMT&quot; &quot;2014-01-01 02:00:00 GMT&quot; ## [3] &quot;2014-01-01 03:00:00 GMT&quot; &quot;2014-01-01 04:00:00 GMT&quot; ## [5] &quot;2014-01-01 05:00:00 GMT&quot; &quot;2014-01-01 06:00:00 GMT&quot; class(df$tempo) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Agora, vamos a extraer os dias da semana do tempo, mes e dia juliano: df$weekdays &lt;- format(df$tempo, &quot;%A&quot;) ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; head(df$weekdays) ## [1] &quot;quarta-feira&quot; &quot;quarta-feira&quot; &quot;quarta-feira&quot; &quot;quarta-feira&quot; ## [5] &quot;quarta-feira&quot; &quot;quarta-feira&quot; df$mes &lt;- format(df$tempo, &quot;%B&quot;) ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; head(df$mes) ## [1] &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; df$diajuliano &lt;- julian(df$tempo) head(df$diajuliano) ## Time differences in days ## [1] 16071.04 16071.08 16071.12 16071.17 16071.21 16071.25 df$ano &lt;- format(df$tempo, &quot;%Y&quot;) ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; 4.2.5 aggregate Vamos a carregar a nossa data.frame. Primero uma olhada head(df) ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 01:00 ## 3 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 02:00 ## 4 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 03:00 ## 5 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 04:00 ## 6 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 05:00 ## 7 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 06:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o NomeParÃ.metro ## 2 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 3 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 4 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 5 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 6 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 7 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - NÃ£o 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta-feira janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta-feira janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta-feira janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta-feira janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta-feira janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta-feira janeiro 16071.25 days 2014 Poderiamos calcular a media horaria por dia da semana. Então: dff &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T) dff ## Group.1 x ## 1 domingo 20327 ## 2 quarta-feira 40180 ## 3 quinta-feira 41199 ## 4 sábado 32298 ## 5 segunda-feira 34057 ## 6 sexta-feira 42558 ## 7 terça-feira 37904 names(dff) &lt;- c(&quot;dias&quot;, &quot;MediaHoraria&quot;) dff$sd &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T)$x dff ## dias MediaHoraria sd ## 1 domingo 20327 20327 ## 2 quarta-feira 40180 40180 ## 3 quinta-feira 41199 41199 ## 4 sábado 32298 32298 ## 5 segunda-feira 34057 34057 ## 6 sexta-feira 42558 42558 ## 7 terça-feira 37904 37904 4.2.6 subset Como poderiamos escolher só o mes de janeiro?? #[ LINHAS , COLUNAS ] head(df[df$mes == &quot;janeiro&quot;, ]) #TODAS AS COLUNAS ## Warning in as.POSIXlt.POSIXct(x, tz): unknown timezone &#39;Americas/Sao_Paulo&#39; ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 01:00 ## 3 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 02:00 ## 4 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 03:00 ## 5 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 04:00 ## 6 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 05:00 ## 7 AutomÃ¡tico CETESB Dados PrimÃ¡rios 01/01/2014 06:00 ## CodigoEstaÃ.Ã.o NomeEstaÃ.Ã.o NomeParÃ.metro ## 2 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 3 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 4 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 5 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 6 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## 7 95 Cid.UniversitÃ¡ria-USP-Ipen NOx (Ã“xidos de NitrogÃªnio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - NÃ£o 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta-feira janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta-feira janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta-feira janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta-feira janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta-feira janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta-feira janeiro 16071.25 days 2014 Mes janeiro pero solo o valor mediahoraria, que retorna um vetor numerico names(df) ## [1] &quot;TipodeRede&quot; &quot;TipodeMonitoramento&quot; &quot;Tipo&quot; ## [4] &quot;Data&quot; &quot;Hora&quot; &quot;CodigoEstaÃ.Ã.o&quot; ## [7] &quot;NomeEstaÃ.Ã.o&quot; &quot;NomeParÃ.metro&quot; &quot;UnidadedeMedida&quot; ## [10] &quot;MediaHoraria&quot; &quot;MediaMovel&quot; &quot;Valido&quot; ## [13] &quot;tempo_char&quot; &quot;tempo&quot; &quot;weekdays&quot; ## [16] &quot;mes&quot; &quot;diajuliano&quot; &quot;ano&quot; head(df[df$mes == &quot;janeiro&quot;, 10]) ## [1] 9 9 5 4 5 5 head(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] 9 9 5 4 5 5 class(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] &quot;integer&quot; Mas vamos salvar o nosso “df” saveRDS(df, &quot;dados/df.rds&quot;) 4.2.7 data.table, read_xl e mais data.table é um pacote que apresenta a classe data.table, que é como uma versão melhorada da classe data-frame O termo especifico é que data-table tem herencia (inherits) da classe data.frame Vamos ver como funciona data.table lendo o dois arquivos e comparar quanto tempo demoram cada um. df1 &lt;- print(system.time(read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 1.09 0.00 1.09 library(data.table) df2 &lt;- print(system.time(fread(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.03 0.01 0.36 olha que estamos usando a função fread. read_xl é mais uma função do universo tidyverse que permite importar excel no R, diretamente e inteligentemente. 4.3 Tidyverse 4.3.1 Leitura %&gt;% Processamento 4.4 Outros Tipos de Dados 4.4.1 NetCDF (Linux o MacOS) O NetCDF (Network Common Data Form) é um conjunto de bibliotecas de software e formatos de dados independentes de máquina e autodescritivos com suporte para criação, acesso e compartilhamento de dados científicos orientados a matrizes. Arquivos NetCDF (criado por essa biblioteca ou por programas que utilizam essa biblioteca) são arquivos compostos por dados, atributos e metadados. O pacote ncdf4 pode ser usado para acessar a essa biblioteca, os comandos abaixo instalam e carregam esse pacote: #install.packages(&quot;ncdf4&quot;) # instala o pacote library(&quot;ncdf4&quot;) # carrega o pacote nc_version() # que retorna a versão da biblioteca ## [1] &quot;ncdf4_1.16_20170401&quot; Um exmplo de NetCDF: if(Sys.info()[[&quot;sysname&quot;]] == &quot;Windows&quot;){ print(&quot;Use Linux&quot;) } else { download.file(&quot;https://github.com/iagdevs/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc&quot;, destfile = &quot;dados/met_em.d03.2016-01-10.nc&quot;) } ## [1] &quot;Use Linux&quot; if(Sys.info()[[&quot;sysname&quot;]] == &quot;Windows&quot;){ print(&quot;Use Linux&quot;) } else { wrf &lt;- ncdf4::nc_open(filename = &quot;dados/met_em.nc&quot;, verbose = T) } ## [1] &quot;Use Linux&quot; O objeto wrf contém algumas informações sobre o conteúdo do arquivo, com um print(wrf) ou simplesmente wrf visualizamos o conteúdo do arquivo: class(wrf) wrf que mostra o nome do arquivo (e versão da biblioteca usada para criar), número de variáveis (92 no arquivo de exemplo), uma descrição de cada variável (incluindo atributos) as dimensões (13 para esse arquivo) e os atributos globais. Agora vamos abrir alguma variável: names(wrf$var) # print no nome de cada variavel TEMP &lt;- ncdf4::ncvar_get(wrf, &quot;TT&quot;) # escolho você picachu class(TEMP) Como o NetCDF é organizado para guardar matrizes (arrays), só sabemos que a variável ST é um array ncatt_get(wrf,&quot;TT&quot;) # ou ncatt_get(wrf,&quot;TT&quot;,verbose = T) dim(TEMP) praticamente a mesma informação do print anterior: float TT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: K description: Temperature stagger: M sr_x: 1 sr_y: 1 como temos apenas 1 tempo essa dimensão é desconsiderada para simplificar. A latitude de cada ponto de grade, assim como longitude níveis e tempo podem ser extraídas: lat &lt;- ncvar_get(wrf, &quot;XLAT_M&quot;) lon &lt;- ncvar_get(wrf, &quot;XLONG_M&quot;) time &lt;- ncvar_get(wrf, &quot;Times&quot;) O metadado de Longitude: float XLONG_M[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees longitude description: Longitude on mass grid stagger: M sr_x: 1 sr_y: 1 Latitude: float XLAT_M[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees latitude description: Latitude on mass grid stagger: M sr_x: 1 sr_y: 1 e a altura: float GHT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: m description: Height stagger: M sr_x: 1 sr_y: 1 Da mesma forma com que podemos acessar variáveis e atributos com ncvar_get e ncatt_get, podemos modificar estes valores com ncvar_put e ncatt_put. Outras operações como renomear (ncvar_rename) e trocar o valor de missval (ncvar_change_missval) também estão disponíveis. DICA: ncatt_get e ncatt_put acessam e alteram os atributos de váriaveis e também atributos globais do NetCDF usando o argumento varid=0. Para salvar as alterações e/ou liberar o acesso ao arquivo use a função nc_close (ou a função nc_sync que sincroniza o NetCDF mas não fecha a conexão com o arquivo). nc_close(wrf) # ou nc_sync(wrf) Novas dimensões e também novas variáveis podem ser criadas com ncvar_def e ncvar_add em um arquivo aberto com permissão de leitura, como por exemplo: wrf &lt;- nc_open(&quot;dados/met_em.nc&quot;, write=TRUE) extrema &lt;- ncvar_def(name = &quot;Tex&quot;, units = &quot;K&quot;, dim = list(wrf$dim$west_east, wrf$dim$south_north, wrf$dim$Time), missval = -999, longname = &quot;temperatura extrema&quot;) ncvar_add(wrf, extrema) names(wrf$var) nc_close(wrf) Se esse arquivo for aberto novamente vai conter 93 variáveis junto com a variável Tex da forma que definimos, caso queria os mesmos atributos que as demais é só usar a função ncatt_get na variável. wrf &lt;- ncdf4::nc_open(&quot;dados/met_em.nc&quot;,write=T) print(wrf) O pacote possue ainda funções mais específicas para a criação de arquivos em NetCDF como nc_create, funções que definem dimenções como ncdim_def e funções para colocar e tirar o arquivo de modo de definição nc_redef e nc_enddef. DICA: o NetCDF no R funciona de forma parecida com ouma lista ou data frame, podemos “ver” ou selecionar suas sub-partes (sub-sub-partes…) com “$” e TAB. 4.4.2 Dados Binários Ler dados binários no R Em meteorologia, frequentemente os dados estão em formato binário. A maior “dificuldade” em ler estes dados está em conhecer como eles foram gerados. Repare que a função readBin requer vários argumentos para ler estes dados da forma correta: args(readBin) ## function (con, what, n = 1L, size = NA_integer_, signed = TRUE, ## endian = .Platform$endian) ## NULL Neste curso, o arquivo binário que vamos abrir como exemplo contém dados de temperatura de brilho obtidas com o satélite GOES-13 (informações em: https://disc.gsfc.nasa.gov/datasets/GPM_MERGIR_1/summary). Lembrem-se de baixar o dado em: https://github.com/iagdevs/cursoR/tree/master/dados # Ler o arquivo binário l1 &lt;- readBin(&quot;dados/gs.140422.1900g.ch4&quot;, what=&quot;int&quot;, n = 1349*1613, size = 2) class(l1) ## [1] &quot;integer&quot; Note que o argumento endian por default é .Platform$endian. Se rodarmos .Platform$endian no R obteremos a ordenação dos bytes (“big” ou “little”) utilizada pela plataforma que estamos usando. Uma forma rápida para verificarmos os nossos dados é gráfica. Logo, que tal um plot? l2 &lt;- matrix(l1, ncol=1613, nrow=1349) class(l2) ## [1] &quot;matrix&quot; # Vamos chamar o pacote cptcity para selecionar facilmente uma paleta de cores legal. library(cptcity) image(l2, col = cpt(find_cpt(&quot;sat&quot;)[8]), main = &quot;Temperatura de brilho&quot;) Tem algo estranho com esta imagem. O que é? (valendo um sticker). library(raster, quietly = TRUE) l3 &lt;- raster(t(l2[1:1349,1:1613]), xmn=-82.00, ymn=-44.96, xmx=-82.0 + (0.03593245*1349), ymx=-44.96 + (0.03593245*1613), crs = CRS(&quot;+init=epsg:4326&quot;)) class(l3) ## [1] &quot;RasterLayer&quot; ## attr(,&quot;package&quot;) ## [1] &quot;raster&quot; O capítulo geoespacial será visto no final deste curso. Porém, nesta etapa vamos usar o pacote raster somente para analisar se os dados binários foram lidos corretamente. sp::spplot(((l3 + 75)/100)-273, # Estas correções são necessárias. Veja: http://www.cpc.ncep.noaa.gov/products/global_precip/html/README col.regions = cpt(find_cpt(&quot;sat&quot;)[8]), at = seq(-80,0,1), main = &quot;Temperatura de brilho (ºC)&quot;) Escrever dados binários no R "]
]
