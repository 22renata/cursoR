[
["index.html", "Curso de R para meteorologia IAG/USP Capitulo 1 Pre-requisitos do sistema 1.1 Pacotes usados neste curso 1.2 Colaborar 1.3 Aportar com dados", " Curso de R para meteorologia IAG/USP Sergio Ibarra-Espinosa, Amanda Rehbein e possivelmente outros (u r invited to collaborate) 2018-04-29 Capitulo 1 Pre-requisitos do sistema Em Windows, instale além do R, Rtools https://cran.r-project.org/bin/windows/Rtools/ Em MAC instale netcdf e: brew unlink gdal brew tap osgeo/osgeo4mac &amp;&amp; brew tap --repair brew install proj brew install geos brew install udunits brew install gdal2 --with-armadillo --with-complete --with-libkml --with-unsupported brew link --force gdal2 Em Ubuntu: - sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable --yes - sudo apt-get --yes --force-yes update -qq # install tmap dependencies - sudo apt-get install --yes libprotobuf-dev protobuf-compiler libv8-3.14-dev # install tmap dependencies; for 16.04 libjq-dev this ppa is needed: - sudo add-apt-repository -y ppa:opencpu/jq - sudo apt-get --yes --force-yes update -qq - sudo apt-get install libjq-dev # units/udunits2 dependency: - sudo apt-get install --yes libudunits2-dev # sf dependencies: - sudo apt-get install --yes libproj-dev libgeos-dev libgdal-dev libnetcdf-dev netcdf-bin gdal-bin 1.1 Pacotes usados neste curso Para fazer este curso instale os seguintes pacotes como indicado: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/tidyverse&quot;) devtools::install_github(&quot;r-spatial/sf&quot;) devtools::install_github(&quot;r-spatial/mapview&quot;) devtools::install_github(&quot;r-spatial/stars&quot;) install.packages(c(&quot;raster&quot;, &quot;sp&quot;, &quot;rgdal&quot;, &quot;maptools&quot;, &quot;ncdf4&quot;)) install.packages(c(&quot;cptcity&quot;, &quot;data.table&quot;, &quot;openair&quot;)) devtools é um pacote para instalar pacotes de diferentes repositórios tidyverse é o universo de pacotes do Hadley Wickham. A instalação tem que ser usando devtools, pois precisamos plotar os objetos espacias sf usando geom_sf. sf e mapview, stars, raster, sp, rgdal e maptools são para a parte espacial. Lembrar que os objetos em meteorologias são espaço-temporais. ncdf4 é um pacote para manipular arquivos NetCDF. cptcity é um pacote que tem 7140 paletas de cores do arquivo web cpt-city (http://soliton.vm.bytemark.co.uk/pub/cpt-city/index.html). openair é um pacote para trabalhar com dados de qualidade do ar e meteorologia. Se faltarem dependencias de sistema, instale elas e instale os pacotes. 1.2 Colaborar A forma preferida de colaboração é com pull-requests em https://github.com/ibarraespinosa/cursoR/pull/new/master. Lembre de aplicar a Guia de Estilo de R de Google (https://google.github.io/styleguide/Rguide.xml) ou com o formato de formatR https://yihui.name/formatr/. Em poucas palavras, lembre que seu código vai ser lido por seres humanos. Se quiser tem acesso no repositório deste curso, me contate. Tem um botão para editar qualquer página. 1.3 Aportar com dados Se você tem dados para fazer este curso mais legal, por favor, edite este aquivo e com pull request, eu vou fazer um merge para poder. NCEP: ftp://nomads.ncdc.noaa.gov/GFS/analysis_only/ "],
["intro.html", "Capitulo 2 Intro 2.1 IMPORTANTE", " Capitulo 2 Intro Este curso é para pos, então vamos ver conteúdo rapidamente e se não da tempo, este curso esta online no sitio https://github.com/atmoschem/cursorIAG. Eu tento usar BASE sempre que posso, e se não da ai vou para outros paradigmas. Outros pacotes de BASE: utils, stats, datasets, graphics, grDevices, grid, methods, tools, parallel, compiler, splines, tcltk , stats4. Veja outros pacotes. Este curso esta baseado no livro R Programming for Data Science. Vamos usar Rstudio Dica: Se não sabe como usar uma função, escreva: ?função. As funções tem argumentos, use TAB para ver eles numa função. 2.1 IMPORTANTE teu novo melhor amigo, besti friendi, BFF, parceiro, mano, tabarish, komrade, compaheiro, colega, buisiness partner amd whatever meanningful is TAB no RSTUDIO. Esta combinação é tão boa, como o cafe com leite, pizza e abacaxi, vitamina de acabate com amendoim Manaus, a melhor combinação. Porque quando se tu não lembra os argumentos da função, e não quer ver o help ? de cada função, so clica TAB e RSTUDIO te mostrara a lista de argumentos. Vamos lá! "],
["r.html", "Capitulo 3 R! 3.1 Objetos de R 3.2 Classe 3.3 Vetores 3.4 Convertir objetos com as 3.5 Matrices e a função matrix 3.6 Array 3.7 list 3.8 Tempo e Data 3.9 Fatores 3.10 data.frames", " Capitulo 3 R! Quase em qualquer sistema operacional mas eu vou focar em Linux. Muita documentação: Intro. I/O. Quer fazer um pacote? Veja, aqui e aqui. Stackoverflow provides a great source of resources. 3.1 Objetos de R Character a numeric 1 integer 1 complex 0+1i logical TRUE 3.2 Classe class função permite ver a classe dos objetos 3.3 Vetores c(“A”, “C”, “D”) 1:5 = c(1, 2, 3, 4, 5) c(TRUE, FALSE) c(1i, -1i) c(1, “C”, “D”) qual é a classe??? c(1, NA, “D”) qual é a classe??? c(1, NA, NaN) qual é a classe??? 3.4 Convertir objetos com as as.numeric(c(1, &quot;C&quot;, &quot;D&quot;)) ## Warning: NAs introduzidos por coerção ## [1] 1 NA NA 3.5 Matrices e a função matrix [linhas, colunas] permitidos elementos da mesma clase! vamos ver os argumentos da função matrix args(matrix) ## function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) ## NULL usando TAB (m &lt;- matrix(data = 0, nrow = 4, ncol = 4)) ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## [3,] 0 0 0 0 ## [4,] 0 0 0 0 (m1 &lt;- matrix(data = 1:(4*4), nrow = 4, ncol = 4)) ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 ## [3,] 3 7 11 15 ## [4,] 4 8 12 16 dim(m1) ## [1] 4 4 (m2 &lt;- matrix(data = 1:(4*4), nrow = 4, ncol = 4, byrow = TRUE)) ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 ## [4,] 13 14 15 16 3.6 Array É como uma matriz de matrizes de matrizes de matrizes…… and so on. args(array) ## function (data = NA, dim = length(data), dimnames = NULL) ## NULL lembre usar TAB (a &lt;- array(data = 0, dim = c(1,1))) ## [,1] ## [1,] 0 class(a) ## [1] &quot;matrix&quot; (a &lt;- array(data = 0, dim = c(1,1,1))) ## , , 1 ## ## [,1] ## [1,] 0 class(a) ## [1] &quot;array&quot; (a &lt;- array(data = 0, dim = c(2,2,2))) ## , , 1 ## ## [,1] [,2] ## [1,] 0 0 ## [2,] 0 0 ## ## , , 2 ## ## [,1] [,2] ## [1,] 0 0 ## [2,] 0 0 (a &lt;- array(data = 0, dim = c(2,4,4))) ## , , 1 ## ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## ## , , 2 ## ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## ## , , 3 ## ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 ## ## , , 4 ## ## [,1] [,2] [,3] [,4] ## [1,] 0 0 0 0 ## [2,] 0 0 0 0 dim(a) ## [1] 2 4 4 (a &lt;- array(data = 0, dim = c(2, 2,2,2))) 3.7 list As listas são como sacolas, e dentro delas, tu pode colocar mais sacolas… então, tu pode ter sacolas, dentro de sacolas, dentro de sacolas… ou list(list(list(list(1)))) ## [[1]] ## [[1]][[1]] ## [[1]][[1]][[1]] ## [[1]][[1]][[1]][[1]] ## [1] 1 a diferença das matrices, tu pode colocar cualquer coisa nas listas, por exemplo: funções, characters, etc. (x &lt;- list(1, &quot;a&quot;, TRUE, 1 + 4i)) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE ## ## [[4]] ## [1] 1+4i 3.8 Tempo e Data R tem classes de tempo e data: (a &lt;- ISOdate(year = 2018, month = 4, day = 5)) ## [1] &quot;2018-04-05 12:00:00 GMT&quot; class(a) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; (b &lt;- ISOdate(year = 2018, month = 4, day = 5, tz = &quot;Americas/Sao_Paulo&quot;)) ## [1] &quot;2018-04-05 12:00:00 Americas&quot; tempo (d &lt;- ISOdatetime(year = 2018, month = 4, day = 5, hour = 0, min = 0, sec = 0, tz = &quot;Americas/Sao_Paulo&quot;)) ## [1] &quot;2018-04-05 Americas&quot; O pacote nanotime permite trabalhar com nano segundos. Da pra fazer secuencias: hoje &lt;- Sys.time() (a &lt;- seq.POSIXt(from = hoje, by = 3600, length.out = 24)) ## [1] &quot;2018-04-29 19:54:43 -03&quot; &quot;2018-04-29 20:54:43 -03&quot; ## [3] &quot;2018-04-29 21:54:43 -03&quot; &quot;2018-04-29 22:54:43 -03&quot; ## [5] &quot;2018-04-29 23:54:43 -03&quot; &quot;2018-04-30 00:54:43 -03&quot; ## [7] &quot;2018-04-30 01:54:43 -03&quot; &quot;2018-04-30 02:54:43 -03&quot; ## [9] &quot;2018-04-30 03:54:43 -03&quot; &quot;2018-04-30 04:54:43 -03&quot; ## [11] &quot;2018-04-30 05:54:43 -03&quot; &quot;2018-04-30 06:54:43 -03&quot; ## [13] &quot;2018-04-30 07:54:43 -03&quot; &quot;2018-04-30 08:54:43 -03&quot; ## [15] &quot;2018-04-30 09:54:43 -03&quot; &quot;2018-04-30 10:54:43 -03&quot; ## [17] &quot;2018-04-30 11:54:43 -03&quot; &quot;2018-04-30 12:54:43 -03&quot; ## [19] &quot;2018-04-30 13:54:43 -03&quot; &quot;2018-04-30 14:54:43 -03&quot; ## [21] &quot;2018-04-30 15:54:43 -03&quot; &quot;2018-04-30 16:54:43 -03&quot; ## [23] &quot;2018-04-30 17:54:43 -03&quot; &quot;2018-04-30 18:54:43 -03&quot; funções bacana: weekdays, month, julian weekdays(a) ## [1] &quot;domingo&quot; &quot;domingo&quot; &quot;domingo&quot; &quot;domingo&quot; &quot;domingo&quot; &quot;segunda&quot; &quot;segunda&quot; ## [8] &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; ## [15] &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; ## [22] &quot;segunda&quot; &quot;segunda&quot; &quot;segunda&quot; months(a) ## [1] &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; ## [9] &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; ## [17] &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; &quot;abril&quot; julian(a) #olha ?julian... dias desde origin ## Time differences in days ## [1] 17650.95 17651.00 17651.04 17651.08 17651.12 17651.16 17651.20 ## [8] 17651.25 17651.29 17651.33 17651.37 17651.41 17651.45 17651.50 ## [15] 17651.54 17651.58 17651.62 17651.66 17651.70 17651.75 17651.79 ## [22] 17651.83 17651.87 17651.91 ## attr(,&quot;origin&quot;) ## [1] &quot;1970-01-01 GMT&quot; olha https://en.wikipedia.org/wiki/Julian_day: 3.9 Fatores Os factors podem ser um pouco infernais. Olha R INFERNO Usados para representar categorias, ejemplo clasico para nos, dias da semana. a &lt;- seq.POSIXt(from = hoje, by = 3600, length.out = 24*7) aa &lt;- weekdays(a) class(aa) ## [1] &quot;character&quot; factor(aa) ## [1] domingo domingo domingo domingo domingo segunda segunda segunda ## [9] segunda segunda segunda segunda segunda segunda segunda segunda ## [17] segunda segunda segunda segunda segunda segunda segunda segunda ## [25] segunda segunda segunda segunda segunda terça terça terça ## [33] terça terça terça terça terça terça terça terça ## [41] terça terça terça terça terça terça terça terça ## [49] terça terça terça terça terça quarta quarta quarta ## [57] quarta quarta quarta quarta quarta quarta quarta quarta ## [65] quarta quarta quarta quarta quarta quarta quarta quarta ## [73] quarta quarta quarta quarta quarta quinta quinta quinta ## [81] quinta quinta quinta quinta quinta quinta quinta quinta ## [89] quinta quinta quinta quinta quinta quinta quinta quinta ## [97] quinta quinta quinta quinta quinta sexta sexta sexta ## [105] sexta sexta sexta sexta sexta sexta sexta sexta ## [113] sexta sexta sexta sexta sexta sexta sexta sexta ## [121] sexta sexta sexta sexta sexta sábado sábado sábado ## [129] sábado sábado sábado sábado sábado sábado sábado sábado ## [137] sábado sábado sábado sábado sábado sábado sábado sábado ## [145] sábado sábado sábado sábado sábado domingo domingo domingo ## [153] domingo domingo domingo domingo domingo domingo domingo domingo ## [161] domingo domingo domingo domingo domingo domingo domingo domingo ## Levels: domingo quarta quinta sábado segunda sexta terça olha os Levels Então: ab &lt;- factor(x = aa, levels = c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;)) levels(ab) ## [1] &quot;Monday&quot; &quot;Tuesday&quot; &quot;Wednesday&quot; &quot;Thursday&quot; &quot;Friday&quot; &quot;Saturday&quot; ## [7] &quot;Sunday&quot; 3.10 data.frames lembre ?data.frame São como planilha EXCEL…. mais o menos É uma classe bem especial, tem elementos de matriz mas o modo é lista (df &lt;- data.frame(a = 1:3)) ## a ## 1 1 ## 2 2 ## 3 3 names(df) ## [1] &quot;a&quot; class(df) ## [1] &quot;data.frame&quot; mode(df) ## [1] &quot;list&quot; Então nrow(df) ## [1] 3 ncol(df) ## [1] 1 dim(df) ## [1] 3 1 "],
["importando-e-exportando-dados-em-r.html", "Capitulo 4 Importando e exportando dados em R 4.1 data-frames 4.2 Processando nossa data-frame 4.3 aggregate 4.4 subset 4.5 data.table, read_xl e mais 4.6 NetCDF 4.7 Binarios", " Capitulo 4 Importando e exportando dados em R 4.1 data-frames Probabelmente um dos promeiros objetos que vamos usar quando começamos usar R. Pensa num data-frame como uma planilha de Libreoffice (o excel). Os data-frame pode ser criaos como foi visto na seção anterior. O principal, é que temos varias funções para ler data-frames no R, entre elas read.csv read.csv2 read.table Agora vamos a ler dados do repositorio usando read.table, mas primeiro vamos lembrar que se tu precisar ver a ajuda da função, tem que escrever no R ?read.table. Então, agora vamos ver os argumentos da função: args(read.table) ## function (file, header = FALSE, sep = &quot;&quot;, quote = &quot;\\&quot;&#39;&quot;, dec = &quot;.&quot;, ## numerals = c(&quot;allow.loss&quot;, &quot;warn.loss&quot;, &quot;no.loss&quot;), row.names, ## col.names, as.is = !stringsAsFactors, na.strings = &quot;NA&quot;, ## colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, ## fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, ## comment.char = &quot;#&quot;, allowEscapes = FALSE, flush = FALSE, ## stringsAsFactors = default.stringsAsFactors(), fileEncoding = &quot;&quot;, ## encoding = &quot;unknown&quot;, text, skipNul = FALSE) ## NULL Aqui vem-se os valores default dos argumentos da função read.table. O terceiro argumento é sep, com valores por default = “”. df &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;) Agora vamos usar a funções head and tail para ver as primeiras e as ultimas 6 linhas do data-frame. head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim Agora vamos ler os mesmos dados com outro formato e testar e read.table funciona do mesmo jeito df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;) # Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : # linha 1 não tinha 6 elementos Vemos a mensagem de error, mas o que quer dizer. Se tu recever um banco de dados tipo .txt e quer abrir no R… ABRE ELE COM BLOCO DE NOTAS PRIMEIRO!!! O primeiro arquivo: O segundo arquivo é: qual é a diferença? Como vemos o segundo arquivo tem separação de “;”, entao, temos que lero arquivo assim: df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;, sep = &quot;;&quot;) head(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim 4.1.1 Qua dificultades tu já enfrentou importando dados? 4.2 Processando nossa data-frame Tem numeroas formas e pacotes para ordenar, arrangiar (Arrange), mutar e cambiar as data-frames. As mais conhecidas são provablemente do universe tidyverse com o famoso pacote dplyr. Mas, nesta curso vamos focar em base. Vamos então revisar a classe de cada columna do nosso data-frame com a função sapply, apresentada em outro capitulo, mas se quiser, da uma olhada em ?sapply. sapply(df, class) ## TipodeRede TipodeMonitoramento Tipo ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## Data Hora CodigoEstação ## &quot;factor&quot; &quot;factor&quot; &quot;integer&quot; ## NomeEstação NomeParâmetro UnidadedeMedida ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## MediaHoraria MediaMovel Valido ## &quot;integer&quot; &quot;factor&quot; &quot;factor&quot; Quando nos trabalhamos com series de tempo, é importante ter a variabel de tempo reconhecida como “tempo”, especificamente como classe “POSIXct”. Mas, a classe de Data é “factor” e de Hora tambem “factor”, o que é ruim. Então, vamos criar uma variabel de tempo mais standard com formato 2018-04-29 19:54:47. Para isso temos que grudar as variabel Data e Hora. Faremios isso numa nova varaibel chamada tempo_char, adicionando ela diretamente no df com o cifrão DOLLAR $. O grude pode ser feito com as funções paste ou paste0. df$tempo_char &lt;- paste(df$Data, df$Hora) head(df$tempo_char) ## [1] &quot;01/01/2014 01:00&quot; &quot;01/01/2014 02:00&quot; &quot;01/01/2014 03:00&quot; ## [4] &quot;01/01/2014 04:00&quot; &quot;01/01/2014 05:00&quot; &quot;01/01/2014 06:00&quot; class(df$tempo_char) ## [1] &quot;character&quot; Esta melhorando mas ainda tem clase character. Para convertir a nossa classe POSIXct podemos usar a função as.POSIXct (olha as.POSIXct). Seus argumentos são: args(as.POSIXct) ## function (x, tz = &quot;&quot;, ...) ## NULL Então, vamos criar outra variabel tempo o formato POSIXct df$tempo &lt;- as.POSIXct(x = df$tempo_char, tz = &quot;Americas/Sao_Paulo&quot;, format = &quot;%d/%m/%Y %H:%M&quot;) head(df$tempo) ## [1] &quot;2014-01-01 01:00:00 Americas&quot; &quot;2014-01-01 02:00:00 Americas&quot; ## [3] &quot;2014-01-01 03:00:00 Americas&quot; &quot;2014-01-01 04:00:00 Americas&quot; ## [5] &quot;2014-01-01 05:00:00 Americas&quot; &quot;2014-01-01 06:00:00 Americas&quot; class(df$tempo) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Agora, vamos a extraer os dias da semana do tempo, mes e dia juliano: df$weekdays &lt;- weekdays(df$tempo) head(df$weekdays) ## [1] &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; df$mes &lt;- months(df$tempo) head(df$mes) ## [1] &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; df$diajuliano &lt;- julian(df$tempo) head(df$diajuliano) ## Time differences in days ## [1] 16071.04 16071.08 16071.12 16071.17 16071.21 16071.25 4.3 aggregate 4.4 subset 4.5 data.table, read_xl e mais data.table é um pacote que apresenta a classe data.table, que é como uma versão melhorada da classe data-frame O termo especifico é que data-table tem herencia (inherits) da classe data.frame Vamos ver como funciona data.table lendo o dois arquivos e comparar quanto tempo demoram cada um. df1 &lt;- print(system.time(read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.056 0.012 1.336 library(data.table) df2 &lt;- print(system.time(fread(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## Warning in fread(&quot;https://raw.githubusercontent.com/ibarraespinosa/ ## cursoR/master/dados/NOXIPEN2014.txt&quot;, : Starting data input on line 2 ## and discarding line 1 because it has too few or too many items to be ## column names or data: &quot;TipodeRede&quot; &quot;TipodeMonitoramento&quot; &quot;Tipo&quot; &quot;Data&quot; ## &quot;Hora&quot; &quot;CodigoEstação&quot; &quot;NomeEstação&quot; &quot;NomeParâmetro&quot; &quot;UnidadedeMedida&quot; ## &quot;MediaHoraria&quot; &quot;MediaMovel&quot; &quot;Valido&quot; ## user system elapsed ## 0.060 0.008 0.337 olha que estamos usando a função fread. read_xl é mais uma função do universo tidyverse que permite importar excel no R, diretamente e inteligentemente. 4.6 NetCDF 4.7 Binarios "],
["applications.html", "Capitulo 5 Applications 5.1 Example one 5.2 Example two", " Capitulo 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Capitulo 6 Final Words", " Capitulo 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
