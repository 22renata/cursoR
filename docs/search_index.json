[
["plotando.html", "Capítulo 5 Plotando 5.1 plot (base) 5.2 ggplot (ggplot2)", " Capítulo 5 Plotando 5.1 plot (base) Exemplo 1: Dados de qualidade do ar df &lt;- readRDS(&quot;df.rds&quot;) summary(df) ## TipodeRede TipodeMonitoramento Tipo ## Automático:8581 CETESB:8581 Dados Primários:8581 ## ## ## ## ## ## ## Data Hora CodigoEstação ## 01/01/2014: 24 16:00 : 363 Min. :95 ## 01/01/2015: 24 12:00 : 361 1st Qu.:95 ## 01/02/2014: 24 14:00 : 361 Median :95 ## 01/04/2014: 24 18:00 : 361 Mean :95 ## 01/05/2014: 24 13:00 : 360 3rd Qu.:95 ## 01/06/2014: 24 17:00 : 360 Max. :95 ## (Other) :8437 (Other):6415 ## NomeEstação NomeParâmetro ## Cid.Universitária-USP-Ipen:8581 NOx (Óxidos de Nitrogênio):8581 ## ## ## ## ## ## ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## ppb:8581 Min. : 0.00 -:8581 Não: 907 Length:8581 ## 1st Qu.: 9.00 Sim:7674 Class :character ## Median : 18.00 Mode :character ## Mean : 29.87 ## 3rd Qu.: 34.00 ## Max. :306.00 ## NA&#39;s :260 ## tempo weekdays mes ## Min. :2014-01-01 01:00:00 Length:8581 Length:8581 ## 1st Qu.:2014-04-05 14:00:00 Class :character Class :character ## Median :2014-07-05 23:00:00 Mode :character Mode :character ## Mean :2014-07-04 20:22:55 ## 3rd Qu.:2014-10-03 10:00:00 ## Max. :2015-01-02 00:00:00 ## ## diajuliano ano ## Length:8581 Length:8581 ## Class :difftime Class :character ## Mode :numeric Mode :character ## ## ## ## A função plot precisa dos seguintes argumentos: args(plot) ## function (x, y, ...) ## NULL Então, a forma mais fácil de plotar uma variável em função do tempo é: plot(x = df$tempo, y = df$MediaHoraria) Feio, né? Tentando deixar mais bonito… plot(x = df$tempo[1:100], y = df$MediaHoraria[1:100], #-- Selecionando uma parte do df! pch = 16, #-- Forma do ponto (círculo preenchido) type = &quot;b&quot;, #-- Tipo de gráfico (&quot;b&quot; = both, ponto e linha) col = &quot;blue&quot;, #-- Cor do elemento (definido pelo type) xlab = &quot;Data&quot;, ylab = &quot;NOx [ppb]&quot;, #-- Nome dos eixos x e y main = &quot;Gráfico mais Bonito&quot;) #-- Título do gráfico Colocando DOIS elementos no mesmo gráfico: df_parcial &lt;- df[1:180,] #-- Selecionando uma parte do df! plot(x = df_parcial$tempo[df_parcial$Valido == &quot;Sim&quot;], y = df_parcial$MediaHoraria[df_parcial$Valido == &quot;Sim&quot;], pch = 16, type = &quot;b&quot;, col = &quot;blue&quot;, xlab = &quot;Data&quot;, ylab = &quot;NOx [ppb]&quot;, main = &quot;Dados Válidos e Inválidos&quot;) lines(x = df_parcial$tempo[df$Valido == &quot;Não&quot;], y = df_parcial$MediaHoraria[df$Valido == &quot;Não&quot;], pch = 15, type = &quot;b&quot;, col = &quot;red&quot;) Desafio: Coloque uma legenda na figura especificando que os dados válidos estão em azul e os inválidos em vermelho A função plot cumpre bem o papel de gerar um gráfico simples, e até permite algumas customizações, mas ela exige cada vez mais linhas de código e argumentos dentro das funções para deixar o gráfico “mais bonito” - ao cumprir o desafio, você irá perceber como uma coisa “simples” como colocar uma legenda pode exigir muito mais do que parece! 5.2 ggplot (ggplot2) A função ggplot funciona de um jeito um pouco diferente. Veja a figura abaixo: Fonte: https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf Em vez de uma única função, o gráfico é formado por camadas, sendo que cada camada é um elemento (geom_... ou stat_...) ou configuração (scale_..._..., coord_..., theme ou theme_..., guides, labs, etc). Consulte a maioria das opções disponíveis em Data Visualization Cheatsheet. Que tal refazermos os gráficos da seção anterior? #-- Não esqueça de carregar o pacote! library(ggplot2) ggplot(df, aes(x = tempo, y = MediaHoraria)) + geom_point(pch = 1) ## Warning: Removed 260 rows containing missing values (geom_point). ggplot(df[1:100,], aes(x = tempo, y = MediaHoraria)) + geom_line(color = &quot;blue&quot;) + #-- Linhas... geom_point(color = &quot;blue&quot;, pch = 16) + #-- ... com pontos labs(title = &quot;Gráfico mais Bonito&quot;, x = &quot;Data&quot;, y = &quot;NOx [ppb]&quot;) + #-- Títulos theme(plot.title = element_text(hjust = 0.5)) #-- Centralizando o título, o padrão do ggplot é colocá-lo à esquerda Agora o mais interessante: ggplot(df[1:180,], aes(x = tempo, y = MediaHoraria)) + geom_line(aes(color = Valido)) + geom_point(aes(color = Valido, shape = Valido)) + labs(title = &quot;Dados Válidos e Inválidos&quot;, x = &quot;Data&quot;, y = &quot;NOx [ppb]&quot;) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) + #-- Definindo as cores manualmente scale_shape_manual(values = c(15, 16)) + #-- Definindo as formas manualmente theme(plot.title = element_text(hjust = 0.5)) Pergunta: Qual a principal diferença entre o código acima e o código usando plot? A função ggplot plota apenas data frames, pois ela mapeia as variáveis por nomes de colunas. Assim, é preciso converter matrizes ou arrays em data frames. Uma vantagem de trabalharmos com data frames, como já vimos antes, é manipular esses dados antes de plotá-los. Vamos analisar o ano de 2014: * Em média, como o NOx varia ao longo do dia? + E para cada dia da semana? + E para cada mês? Usando algumas funções dentro do pacote tidyverse, como o pipe (%&gt;%): library(tidyverse) library(scales) df_2014 &lt;- filter(df, ano == &quot;2014&quot;) df_2014_hour &lt;- df_2014 %&gt;% #-- A partir do data frame df_2014... group_by(Hora) %&gt;% #-- ... agrupe os dados pela coluna hora... summarise(Media = mean(MediaHoraria, na.rm = T)) %&gt;% #-- ... E calcule as médias, salvando em uma coluna nova mutate(Hora = as.POSIXct(strptime(Hora, &quot;%H:%M&quot;))) %&gt;% #-- Transformando em data ungroup() #-- Desagrupando ggplot(df_2014_hour) + scale_x_datetime(date_labels = &quot;%H:%M&quot;) + #-- Formato de data que aparecerá no eixo x geom_line(aes(x = Hora, y = Media, group = 1), color = &quot;purple&quot;) + labs(title = &quot;Média Horária Anual&quot;, y = &quot;NOx [ppb]&quot;) Exercício: Em média, como o NOx varia mensalmente? Faça um gráfico de acordo. ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line() ## Warning: Removed 1 rows containing missing values (geom_path). ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line() + facet_wrap(~mes) ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line() + facet_wrap(~mes, scales = &quot;free&quot;) Y para terminar, meu theme favorito devtools::install_github(&quot;atmoschem/veinreport&quot;) e logo library(veinreport) library(cptcity) ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line()+ theme_black() + scale_color_gradientn(colours = cpt()) ## Warning: Removed 1 rows containing missing values (geom_path). Pode revertir a escala de cores ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line()+ theme_black() + scale_color_gradientn(colours = rev(cpt())) + facet_wrap(~mes, scales = &quot;free&quot;) não gostou, tenta com a sorte ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line()+ theme_black() + facet_wrap(~mes, scales = &quot;free&quot;) + scale_color_gradientn(colours = lucky()) ## Colour gradient: jmn_jmn_d20, number: 4553 ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line()+ theme_black() + facet_wrap(~mes, scales = &quot;free&quot;) + scale_color_gradientn(colours = lucky()) ## Colour gradient: nd_basic_Red_Cyan_CCW, number: 5298 ggplot(df, aes(x = tempo, y = MediaHoraria, colour = MediaHoraria)) + geom_line()+ theme_black() + scale_color_gradientn(colours = lucky()) ## Colour gradient: jjg_cbac_seq_cbacBlues07, number: 3705 ## Warning: Removed 1 rows containing missing values (geom_path). "]
]
