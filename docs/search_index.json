[
["importando-e-exportando-dados.html", "Capítulo 4 Importando e Exportando Dados 4.1 Data Frames 4.2 BASE 4.3 Tidyverse 4.4 Outros Tipos de Dados", " Capítulo 4 Importando e Exportando Dados 4.1 Data Frames Probabelmente um dos promeiros objetos que vamos usar quando começamos usar R. Pensa num data-frame como uma planilha de Libreoffice (o excel). Os data-frame pode ser criaos como foi visto na seção anterior. O principal, é que temos varias funções para ler data-frames no R, entre elas read.csv read.csv2 read.table Agora vamos a ler dados do repositorio usando read.table, mas primeiro vamos lembrar que se tu precisar ver a ajuda da função, tem que escrever no R ?read.table. Então, agora vamos ver os argumentos da função: args(read.table) ## function (file, header = FALSE, sep = &quot;&quot;, quote = &quot;\\&quot;&#39;&quot;, dec = &quot;.&quot;, ## numerals = c(&quot;allow.loss&quot;, &quot;warn.loss&quot;, &quot;no.loss&quot;), row.names, ## col.names, as.is = !stringsAsFactors, na.strings = &quot;NA&quot;, ## colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, ## fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, ## comment.char = &quot;#&quot;, allowEscapes = FALSE, flush = FALSE, ## stringsAsFactors = default.stringsAsFactors(), fileEncoding = &quot;&quot;, ## encoding = &quot;unknown&quot;, text, skipNul = FALSE) ## NULL Aqui vem-se os valores default dos argumentos da função read.table. O terceiro argumento é sep, com valores por default = “”. df &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;) Agora vamos usar a funções head and tail para ver as primeiras e as ultimas 6 linhas do data-frame. head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim Agora vamos ler os mesmos dados com outro formato e testar e read.table funciona do mesmo jeito df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;) # Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : # linha 1 não tinha 6 elementos Vemos a mensagem de error, mas o que quer dizer. Se tu recever um banco de dados tipo .txt e quer abrir no R… ABRE ELE COM BLOCO DE NOTAS PRIMEIRO!!! O primeiro arquivo: O segundo arquivo é: qual é a diferença? Como vemos o segundo arquivo tem separação de “;”, entao, temos que lero arquivo assim: df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;, sep = &quot;;&quot;) head(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim Qua dificultades tu já enfrentou importando dados? 4.2 BASE 4.2.1 Exportando texto com write.table Exportar é bem facil, mas se sabemos os argumentos das funções, vai ser mais eficiente ainda. Vamos write.table args(write.table) ## function (x, file = &quot;&quot;, append = FALSE, quote = TRUE, sep = &quot; &quot;, ## eol = &quot;\\n&quot;, na = &quot;NA&quot;, dec = &quot;.&quot;, row.names = TRUE, col.names = TRUE, ## qmethod = c(&quot;escape&quot;, &quot;double&quot;), fileEncoding = &quot;&quot;) ## NULL Se temos um data-frame com colunas de classe character, quote = TRUE quer dizer que o arquivo de texto resultante vai ter aspas nas colunas de caracter. sep é como vão ser separadas as colunas. Se tu quer abrir o arquivo com Excel, poderia separar com “,”, “;”, &quot; “,”“… Depende como tu quer. eol quer dizer end of line, e é para ver a forma de colocar o “end of line” row.names.. esta TRUE mas SEMPRE SEMPRE SEMPRE COLOCA: row.names = FALSE. Se não, R vai adiiconar uma coluna com os indices das linhas…. col.names se tu quer o nome nas colunas… PRATICA! 4.2.2 Exportando objetos com save args(save) ## function (..., list = character(), file = stop(&quot;&#39;file&#39; must be specified&quot;), ## ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), ## compression_level, eval.promises = TRUE, precheck = TRUE) ## NULL save salva o objeto com a extensão .rda. Para carregar de volta o objeto, tem que ser feito com a função load args(load) ## function (file, envir = parent.frame(), verbose = FALSE) ## NULL O que pode ser ruim, porque as vezes tu esqueceu o nome do objeto no ambiente de R. Por exemplo, tu salvou o arquivo save(frenteFria, file = &quot;FrenteQuente.rda&quot;) logo tu carrega load(&quot;FrenteQuente.rda&quot;) acreditando que vai ter tua frente quente, mas o nome do objeto no ambiente de R é frenteDria… então, tem que ficar de olho, e como somos imperfeito, vai dar merda…. O melhor da função é que permite salvar com tipos de compressão, por exemplo compress = “xz”. 4.2.3 Exportando objetos com saveRDS Esta é uma das minhas funçoes favoritas no R args(saveRDS) ## function (object, file = &quot;&quot;, ascii = FALSE, version = NULL, compress = TRUE, ## refhook = NULL) ## NULL e args(readRDS) ## function (file, refhook = NULL) ## NULL Tu consegue salvar o objeto R de forma serializada e compactada com o argumento compress mas o melhor é quando vai chamar o objeto de volta ao R. Agora tu usa o readRDS e coloca o nome que tu quiser. saveRDS(FrenteQuente, &quot;FrenteQuente.rds&quot;) frenteQ &lt;- readRDS(&quot;FremteQuente.rds&quot;) 4.2.4 Processando nossa data-frame Tem numeroas formas e pacotes para ordenar, arrangiar (Arrange), mutar e cambiar as data-frames. As mais conhecidas são provablemente do universe tidyverse com o famoso pacote dplyr. Mas, nesta curso vamos focar em base. Vamos então revisar a classe de cada columna do nosso data-frame com a função sapply, apresentada em outro capitulo, mas se quiser, da uma olhada em ?sapply. sapply(df, class) ## TipodeRede TipodeMonitoramento Tipo ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## Data Hora CodigoEstação ## &quot;factor&quot; &quot;factor&quot; &quot;integer&quot; ## NomeEstação NomeParâmetro UnidadedeMedida ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## MediaHoraria MediaMovel Valido ## &quot;integer&quot; &quot;factor&quot; &quot;factor&quot; Quando nos trabalhamos com series de tempo, é importante ter a variabel de tempo reconhecida como “tempo”, especificamente como classe “POSIXct”. Mas, a classe de Data é “factor” e de Hora tambem “factor”, o que é ruim. Então, vamos criar uma variabel de tempo mais standard com formato 2018-06-01 17:34:01. Para isso temos que grudar as variabel Data e Hora. Faremios isso numa nova varaibel chamada tempo_char, adicionando ela diretamente no df com o cifrão DOLLAR $. O grude pode ser feito com as funções paste ou paste0. df$tempo_char &lt;- paste(df$Data, df$Hora) head(df$tempo_char) ## [1] &quot;01/01/2014 01:00&quot; &quot;01/01/2014 02:00&quot; &quot;01/01/2014 03:00&quot; ## [4] &quot;01/01/2014 04:00&quot; &quot;01/01/2014 05:00&quot; &quot;01/01/2014 06:00&quot; class(df$tempo_char) ## [1] &quot;character&quot; Esta melhorando mas ainda tem clase character. Para convertir a nossa classe POSIXct podemos usar a função as.POSIXct (olha as.POSIXct). Seus argumentos são: args(as.POSIXct) ## function (x, tz = &quot;&quot;, ...) ## NULL Então, vamos criar outra variabel tempo o formato POSIXct df$tempo &lt;- as.POSIXct(x = df$tempo_char, tz = &quot;Americas/Sao_Paulo&quot;, format = &quot;%d/%m/%Y %H:%M&quot;) head(df$tempo) ## [1] &quot;2014-01-01 01:00:00 Americas&quot; &quot;2014-01-01 02:00:00 Americas&quot; ## [3] &quot;2014-01-01 03:00:00 Americas&quot; &quot;2014-01-01 04:00:00 Americas&quot; ## [5] &quot;2014-01-01 05:00:00 Americas&quot; &quot;2014-01-01 06:00:00 Americas&quot; class(df$tempo) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Agora, vamos a extraer os dias da semana do tempo, mes e dia juliano: df$weekdays &lt;- format(df$tempo, &quot;%A&quot;) head(df$weekdays) ## [1] &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; df$mes &lt;- format(df$tempo, &quot;%B&quot;) head(df$mes) ## [1] &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; df$diajuliano &lt;- julian(df$tempo) head(df$diajuliano) ## Time differences in days ## [1] 16071.04 16071.08 16071.12 16071.17 16071.21 16071.25 df$ano &lt;- format(df$tempo, &quot;%Y&quot;) 4.2.5 aggregate Vamos a carregar a nossa data.frame. Primero uma olhada head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - Não 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta janeiro 16071.25 days 2014 Poderiamos calcular a media horaria por dia da semana. Então: dff &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T) dff ## Group.1 x ## 1 domingo 20327 ## 2 quarta 40180 ## 3 quinta 41199 ## 4 sábado 32298 ## 5 segunda 34057 ## 6 sexta 42558 ## 7 terça 37904 names(dff) &lt;- c(&quot;dias&quot;, &quot;MediaHoraria&quot;) dff$sd &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T)$x dff ## dias MediaHoraria sd ## 1 domingo 20327 20327 ## 2 quarta 40180 40180 ## 3 quinta 41199 41199 ## 4 sábado 32298 32298 ## 5 segunda 34057 34057 ## 6 sexta 42558 42558 ## 7 terça 37904 37904 4.2.6 subset Como poderiamos escolher só o mes de janeiro?? #[ LINHAS , COLUNAS ] head(df[df$mes == &quot;janeiro&quot;, ]) #TODAS AS COLUNAS ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - Não 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta janeiro 16071.25 days 2014 Mes janeiro pero solo o valor mediahoraria, que retorna um vetor numerico names(df) ## [1] &quot;TipodeRede&quot; &quot;TipodeMonitoramento&quot; &quot;Tipo&quot; ## [4] &quot;Data&quot; &quot;Hora&quot; &quot;CodigoEstação&quot; ## [7] &quot;NomeEstação&quot; &quot;NomeParâmetro&quot; &quot;UnidadedeMedida&quot; ## [10] &quot;MediaHoraria&quot; &quot;MediaMovel&quot; &quot;Valido&quot; ## [13] &quot;tempo_char&quot; &quot;tempo&quot; &quot;weekdays&quot; ## [16] &quot;mes&quot; &quot;diajuliano&quot; &quot;ano&quot; head(df[df$mes == &quot;janeiro&quot;, 10]) ## [1] 9 9 5 4 5 5 head(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] 9 9 5 4 5 5 class(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] &quot;integer&quot; Mas vamos salvar o nosso “df” saveRDS(df, &quot;dados/df.rds&quot;) 4.2.7 data.table e mais data.table é um pacote que apresenta a classe data.table, que é como uma versão melhorada da classe data-frame O termo especifico é que data-table tem herencia (inherits) da classe data.frame Vamos ver como funciona data.table lendo o dois arquivos e comparar quanto tempo demoram cada um. df1 &lt;- print(system.time(read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.111 0.003 0.518 library(data.table) df2 &lt;- print(system.time(fread(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.030 0.004 0.069 olha que estamos usando a função fread. 4.3 Tidyverse Um método mais recente (e muito interessante!) de tratar data frames é usando os pacotes dentro do Tidyverse. Usando diversas funções dos pacotes readr, tidyr e dplyr, por exemplo, é possível ler e processar dados de uma maneira mais user-friendly devido à sintaxe das funções e de como elas podem ser usadas em conjunto. Note que muitas das funções usadas abaixo podem ser encontradas em Base ou em outros pacotes. 4.3.1 Importando dados Todas as funções de leitura possuem a mesma estrutura: read_*(arquivo, col_names = TRUE, col_types = NULL, locale = default_locale(), na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, comment = &quot;&quot;, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = interactive()) Dica: Quando a descrição de uma função mostra os argumentos já definidos (col_names = TRUE), isso significa que esses são os valores padrão e que você não precisa escrever os argumentos se não quiser mudá-los Assim, todas as funções de leitura só precisam do nome do arquivo! Então como ler diferentes arquivos? Usando diferentes funções. read_csv lê arquivos .csv separados por \\(,\\) read_csv2 lê arquivos .csv separados por \\(;\\) read_delim lê arquivos com outros separadores (definidos com o argumento delim) read_fwf lê arquivos com delimitação fixa (definidos com o argumento col_positions) read_xl lê arquivos Excel (.xls e .xlsx) 4.3.2 Leitura %&gt;% Processamento Existem funções de leitura e modificação de data frames. Muitas vezes, você precisa lidar com dados “brutos” e que precisam de um certo processamento antes de serem utilizados em cálculos e gráficos. Isso exige no mínimo duas funções em duas linhas de código (uma para ler e outra para modificar), mas em geral esse processo precisa de bem mais do que isso. O operador %&gt;% (chamada de pipe) está dentro do pacote magnittr (dentro do Tidyverse) e é muito útil nesse processo! (Leia um pouco sobre ele aqui) Como ele funciona? variável %&gt;% função1(., faz a modificação 1) %&gt;% função2(., faz a modificação 2) %&gt;% … funçãon(., faz a modificação n) O ponto (.) acima indica que a função será aplicada na versão da variável que chega nela. Em notação matemática, podemos dizer que \\(x \\ \\ \\%&gt;\\% \\ \\ f(y) = f(x,y)\\). Por exemplo, observe o código abaixo: library(&quot;tidyverse&quot;) seq(1, 10) %&gt;% order(., decreasing = T) %&gt;% paste(., &quot;vezes&quot;) ## [1] &quot;10 vezes&quot; &quot;9 vezes&quot; &quot;8 vezes&quot; &quot;7 vezes&quot; &quot;6 vezes&quot; &quot;5 vezes&quot; ## [7] &quot;4 vezes&quot; &quot;3 vezes&quot; &quot;2 vezes&quot; &quot;1 vezes&quot; O vetor (que não precisa necessariamente ser definido como uma variável) é primeiro ordenado de forma decrescente e, a partir dessa modificação, é transformado em um vetor de caracteres ao colar a string “vezes” a ele. Uma forma de fazer isso sem usar %&gt;% seria: paste(order(seq(1, 10), decreasing = T), &quot;vezes&quot;) ## [1] &quot;10 vezes&quot; &quot;9 vezes&quot; &quot;8 vezes&quot; &quot;7 vezes&quot; &quot;6 vezes&quot; &quot;5 vezes&quot; ## [7] &quot;4 vezes&quot; &quot;3 vezes&quot; &quot;2 vezes&quot; &quot;1 vezes&quot; Pergunta: Na sua opinião, qual é o código mais fácil e rápido de ser entendido? Como isso pode ser aplicado a data frames? 4.4 Outros Tipos de Dados 4.4.1 NetCDF O NetCDF (Network Common Data Form) é um conjunto de bibliotecas de software e formatos de dados independentes de máquina e autodescritivos com suporte para criação, acesso e compartilhamento de dados científicos orientados a matrizes. Arquivos NetCDF (criado por essa biblioteca ou por programas que utilizam essa biblioteca) são arquivos compostos por dados, atributos e metadados. O pacote ncdf4 pode ser usado para acessar a essa biblioteca, os comandos abaixo instalam e carregam esse pacote: #install.packages(&quot;ncdf4&quot;) # instala o pacote install.packages(&quot;eixport&quot;) # pacote onde estão os dados que iremos utilizar ## Installing package into &#39;/home/ccl/R/x86_64-pc-linux-gnu-library/3.4&#39; ## (as &#39;lib&#39; is unspecified) library(&quot;ncdf4&quot;) # carrega os pacotes library(&quot;eixport&quot;) # carrega os pacotes nc_version() # que retorna a versão da biblioteca ## [1] &quot;ncdf4_1.16_20170401&quot; Um exemplo de NetCDF: wrfinput &lt;- paste0(system.file(&quot;extdata&quot;, package = &quot;eixport&quot;), &quot;/wrfinput_d01&quot;) Abre o arquivo .nc wrf &lt;- ncdf4::nc_open(wrfinput) print(wrf) ## File /home/ccl/R/x86_64-pc-linux-gnu-library/3.4/eixport/extdata/wrfinput_d01 (NC_FORMAT_CLASSIC): ## ## 3 variables (excluding dimension variables): ## char Times[DateStrLen,Time] ## float XLAT[west_east,south_north] ## MemoryOrder: XY ## description: LATITUDE, SOUTH IS NEGATIVE ## units: degree north ## stagger: ## FieldType: 104 ## float XLONG[west_east,south_north] ## MemoryOrder: XY ## description: LONGITUDE, WEST IS NEGATIVE ## units: degree east ## stagger: ## FieldType: 104 ## ## 4 dimensions: ## DateStrLen Size:19 ## Time Size:1 *** is unlimited *** ## west_east Size:149 ## south_north Size:99 ## ## 79 global attributes: ## TITLE: OUTPUT FROM REAL_EM V3.9.1.1 PREPROCESSOR ## START_DATE: 2011-08-01_00:00:00 ## SIMULATION_START_DATE: 2011-08-01_00:00:00 ## WEST-EAST_GRID_DIMENSION: 150 ## SOUTH-NORTH_GRID_DIMENSION: 100 ## BOTTOM-TOP_GRID_DIMENSION: 35 ## DX: 9000 ## DY: 9000 ## GRIDTYPE: C ## DIFF_OPT: 1 ## KM_OPT: 4 ## DAMP_OPT: 3 ## DAMPCOEF: 0.200000002980232 ## KHDIF: 0 ## KVDIF: 0 ## MP_PHYSICS: 10 ## RA_LW_PHYSICS: 4 ## RA_SW_PHYSICS: 4 ## SF_SFCLAY_PHYSICS: 1 ## SF_SURFACE_PHYSICS: 2 ## BL_PBL_PHYSICS: 1 ## CU_PHYSICS: 11 ## SF_LAKE_PHYSICS: 0 ## SURFACE_INPUT_SOURCE: 1 ## SST_UPDATE: 0 ## GRID_FDDA: 0 ## GFDDA_INTERVAL_M: 0 ## GFDDA_END_H: 0 ## GRID_SFDDA: 0 ## SGFDDA_INTERVAL_M: 0 ## SGFDDA_END_H: 0 ## HYPSOMETRIC_OPT: 2 ## USE_THETA_M: 0 ## USE_MAXW_LEVEL: 0 ## USE_TROP_LEVEL: 0 ## GWD_OPT: 0 ## SF_URBAN_PHYSICS: 1 ## SF_OCEAN_PHYSICS: 0 ## SIMULATION_INITIALIZATION_TYPE: REAL-DATA CASE ## WEST-EAST_PATCH_START_UNSTAG: 1 ## WEST-EAST_PATCH_END_UNSTAG: 149 ## WEST-EAST_PATCH_START_STAG: 1 ## WEST-EAST_PATCH_END_STAG: 150 ## SOUTH-NORTH_PATCH_START_UNSTAG: 1 ## SOUTH-NORTH_PATCH_END_UNSTAG: 99 ## SOUTH-NORTH_PATCH_START_STAG: 1 ## SOUTH-NORTH_PATCH_END_STAG: 100 ## BOTTOM-TOP_PATCH_START_UNSTAG: 1 ## BOTTOM-TOP_PATCH_END_UNSTAG: 34 ## BOTTOM-TOP_PATCH_START_STAG: 1 ## BOTTOM-TOP_PATCH_END_STAG: 35 ## GRID_ID: 1 ## PARENT_ID: 1 ## I_PARENT_START: 1 ## J_PARENT_START: 1 ## PARENT_GRID_RATIO: 1 ## DT: 45 ## CEN_LAT: -23.5499954223633 ## CEN_LON: -45 ## TRUELAT1: -23 ## TRUELAT2: -24 ## MOAD_CEN_LAT: -23.5499954223633 ## STAND_LON: -45 ## POLE_LAT: 90 ## POLE_LON: 0 ## GMT: 0 ## JULYR: 2011 ## JULDAY: 213 ## MAP_PROJ: 1 ## MAP_PROJ_CHAR: Lambert Conformal ## MMINLU: MODIFIED_IGBP_MODIS_NOAH ## NUM_LAND_CAT: 21 ## ISWATER: 17 ## ISLAKE: 21 ## ISICE: 15 ## ISURBAN: 13 ## ISOILWATER: 14 ## HYBRID_OPT: -1 ## ETAC: 0 O objeto wrf contém algumas informações sobre o conteúdo do arquivo, com um print(wrf) ou simplesmente wrf visualizamos o conteúdo do arquivo: class(wrf) ## [1] &quot;ncdf4&quot; # fazer print(wrf) que mostra o nome do arquivo (e versão da biblioteca usada para criar), número de variáveis (92 no arquivo de exemplo), uma descrição de cada variável (incluindo atributos) as dimensões (13 para esse arquivo) e os atributos globais. Agora vamos abrir alguma variável: names(wrf$var) # print no nome de cada variavel ## [1] &quot;Times&quot; &quot;XLAT&quot; &quot;XLONG&quot; #Times &lt;- ncdf4::ncvar_get(wrf, varid = &quot;Times&quot;) # escolho você picachu #class(Times) Como o NetCDF é organizado para guardar matrizes (arrays), só sabemos que a variável ST é um array ncatt_get(wrf,&quot;Times&quot;, verbose = T) # ou ncatt_get(wrf,&quot;TT&quot;,verbose = T) ## [1] &quot;ncatt_get: entering&quot; ## [1] &quot;ncatt_get: is NOT a global att&quot; ## [1] &quot;ncatt_get: getting object id&quot; ## [1] &quot;vobjtovarid4: entering&quot; ## [1] &quot;Variable named Times found in file with varid= 65536 2&quot; ## [1] &quot;ncatt_get: calling ncatt_get_inner for a non-global att&quot; ## [1] &quot;ncatt_get_inner: entering with ncid= 65536 varid= 2 attname= NA&quot; ## [1] &quot;ncatt_get_inner: no attname specified, returning a list with name/value pairs *******&quot; ## [1] &quot;ncatt_get_inner: number of atts for this var [or file, if global]: 0&quot; ## [1] &quot;ncatt_get_inner: no attributes for this var/file, returning empty list&quot; ## list() praticamente a mesma informação do outro caso: float TT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: K description: Temperature stagger: M sr_x: 1 sr_y: 1 como temos apenas 1 tempo essa dimensão é desconsiderada para simplificar. A latitude de cada ponto de grade, assim como longitude níveis e tempo podem ser extraídas: lat &lt;- ncvar_get(wrf, &quot;XLAT&quot;) lon &lt;- ncvar_get(wrf, &quot;XLONG&quot;) time &lt;- ncvar_get(wrf, &quot;Times&quot;) O metadado de Longitude: float XLONG[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees longitude description: Longitude on mass grid stagger: M sr_x: 1 sr_y: 1 Latitude: float XLAT[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees latitude description: Latitude on mass grid stagger: M sr_x: 1 sr_y: 1 e a altura: float GHT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: m description: Height stagger: M sr_x: 1 sr_y: 1 Da mesma forma com que podemos acessar variáveis e atributos com ncvar_get e ncatt_get, podemos modificar estes valores com ncvar_put e ncatt_put. Outras operações como renomear (ncvar_rename) e trocar o valor de missval (ncvar_change_missval) também estão disponíveis. DICA: ncatt_get e ncatt_put acessam e alteram os atributos de váriaveis e também atributos globais do NetCDF usando o argumento varid=0. Para salvar as alterações e/ou liberar o acesso ao arquivo use a função nc_close (ou a função nc_sync que sincroniza o NetCDF mas não fecha a conexão com o arquivo). nc_close(wrf) # ou nc_sync(wrf) Novas dimensões e também novas variáveis podem ser criadas com ncvar_def e ncvar_add em um arquivo aberto com permissão de leitura, como por exemplo: wrf &lt;- nc_open(&quot;dados/met_em.d03.2016-01-10.nc&quot;, write = TRUE) extrema &lt;- ncvar_def(name = &quot;Tex&quot;, units = &quot;K&quot;, dim = list(wrf$dim$west_east, wrf$dim$south_north, wrf$dim$Time), missval = -999, longname = &quot;temperatura extrema&quot;) ncvar_add(wrf, extrema) names(wrf$var) nc_close(wrf) Se esse arquivo for aberto novamente vai conter 93 variáveis junto com a variável Tex da forma que definimos, caso queria os mesmos atributos que as demais é só usar a função ncatt_get na variável. wrf &lt;- ncdf4::nc_open(&quot;dados/met_em.d03.2016-01-10.nc&quot;, write=T) print(wrf)[1:10] O pacote possue ainda funções mais específicas para a criação de arquivos em NetCDF como nc_create, funções que definem dimenções como ncdim_def e funções para colocar e tirar o arquivo de modo de definição nc_redef e nc_enddef. DICA: o NetCDF no R funciona de forma parecida com ouma lista ou data frame, podemos “ver” ou selecionar suas sub-partes (sub-sub-partes…) com “$” e TAB. 4.4.2 Dados Binários Ler dados binários no R Em meteorologia, frequentemente os dados estão em formato binário. A maior “dificuldade” em ler estes dados está em conhecer como eles foram gerados. Repare que a função readBin requer vários argumentos para ler estes dados da forma correta: args(readBin) ## function (con, what, n = 1L, size = NA_integer_, signed = TRUE, ## endian = .Platform$endian) ## NULL Neste curso, o arquivo binário que vamos abrir como exemplo contém dados de temperatura de brilho obtidas com o satélite GOES-13 (informações em: https://disc.gsfc.nasa.gov/datasets/GPM_MERGIR_1/summary). Lembrem-se de baixar o dado em: https://github.com/iagdevs/cursoR/tree/master/dados # Ler o arquivo binário l1 &lt;- readBin(&quot;dados/gs.140422.1900g.ch4&quot;, what=&quot;int&quot;, n = 1349*1613, size = 2) class(l1) ## [1] &quot;integer&quot; Note que o argumento endian por default é .Platform$endian. Se rodarmos .Platform$endian no R obteremos a ordenação dos bytes (“big” ou “little”) utilizada pela plataforma que estamos usando. Uma forma rápida para verificarmos os nossos dados é gráfica. Logo, que tal um plot? l2 &lt;- matrix(l1, ncol=1613, nrow=1349) class(l2) ## [1] &quot;matrix&quot; # Vamos chamar o pacote cptcity para selecionar facilmente uma paleta de cores legal. library(cptcity) image(l2, col = cpt(find_cpt(&quot;sat&quot;)[8]), main = &quot;Temperatura de brilho&quot;) Tem algo estranho com esta imagem. O que é? (valendo um sticker). library(raster, quietly = TRUE) l3 &lt;- raster(t(l2[1:1349,1:1613]), xmn=-82.00, ymn=-44.96, xmx=-82.0 + (0.03593245*1349), ymx=-44.96 + (0.03593245*1613), crs = CRS(&quot;+init=epsg:4326&quot;)) class(l3) ## [1] &quot;RasterLayer&quot; ## attr(,&quot;package&quot;) ## [1] &quot;raster&quot; O capítulo geoespacial será visto no final deste curso. Porém, nesta etapa vamos usar o pacote raster somente para analisar se os dados binários foram lidos corretamente. sp::spplot(((l3 + 75)/100)-273, # Estas correções são necessárias. Veja: http://www.cpc.ncep.noaa.gov/products/global_precip/html/README col.regions = cpt(find_cpt(&quot;sat&quot;)[8]), at = seq(-80,0,1), main = &quot;Temperatura de brilho (ºC)&quot;) Escrever dados binários no R "]
]
