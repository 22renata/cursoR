[
["importando-e-exportando-dados-em-r.html", "Capítulo 4 Importando e exportando dados em R 4.1 Data Frames 4.2 BASE 4.3 Tidyverse 4.4 Outros Tipos de Dados", " Capítulo 4 Importando e exportando dados em R 4.1 Data Frames Probabelmente um dos promeiros objetos que vamos usar quando começamos usar R. Pensa num data-frame como uma planilha de Libreoffice (o excel). Os data-frame pode ser criaos como foi visto na seção anterior. O principal, é que temos varias funções para ler data-frames no R, entre elas read.csv read.csv2 read.table Agora vamos a ler dados do repositorio usando read.table, mas primeiro vamos lembrar que se tu precisar ver a ajuda da função, tem que escrever no R ?read.table. Então, agora vamos ver os argumentos da função: args(read.table) ## function (file, header = FALSE, sep = &quot;&quot;, quote = &quot;\\&quot;&#39;&quot;, dec = &quot;.&quot;, ## numerals = c(&quot;allow.loss&quot;, &quot;warn.loss&quot;, &quot;no.loss&quot;), row.names, ## col.names, as.is = !stringsAsFactors, na.strings = &quot;NA&quot;, ## colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, ## fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, ## comment.char = &quot;#&quot;, allowEscapes = FALSE, flush = FALSE, ## stringsAsFactors = default.stringsAsFactors(), fileEncoding = &quot;&quot;, ## encoding = &quot;unknown&quot;, text, skipNul = FALSE) ## NULL Aqui vem-se os valores default dos argumentos da função read.table. O terceiro argumento é sep, com valores por default = “”. df &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;) Agora vamos usar a funções head and tail para ver as primeiras e as ultimas 6 linhas do data-frame. head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim Agora vamos ler os mesmos dados com outro formato e testar e read.table funciona do mesmo jeito df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;) # Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : # linha 1 não tinha 6 elementos Vemos a mensagem de error, mas o que quer dizer. Se tu recever um banco de dados tipo .txt e quer abrir no R… ABRE ELE COM BLOCO DE NOTAS PRIMEIRO!!! O primeiro arquivo: O segundo arquivo é: qual é a diferença? Como vemos o segundo arquivo tem separação de “;”, entao, temos que lero arquivo assim: df2 &lt;- read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014v2.txt&quot;, sep = &quot;;&quot;) head(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 2 ppb 9 - Não ## 3 ppb 9 - Sim ## 4 ppb 5 - Sim ## 5 ppb 4 - Sim ## 6 ppb 5 - Sim ## 7 ppb 5 - Sim tail(df2) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 8577 Automático CETESB Dados Primários 01/01/2015 19:00 ## 8578 Automático CETESB Dados Primários 01/01/2015 20:00 ## 8579 Automático CETESB Dados Primários 01/01/2015 21:00 ## 8580 Automático CETESB Dados Primários 01/01/2015 22:00 ## 8581 Automático CETESB Dados Primários 01/01/2015 23:00 ## 8582 Automático CETESB Dados Primários 01/01/2015 24:00 ## CodigoEstação NomeEstação NomeParâmetro ## 8577 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8578 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8579 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8580 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8581 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 8582 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido ## 8577 ppb 3 - Sim ## 8578 ppb 8 - Sim ## 8579 ppb 11 - Sim ## 8580 ppb 11 - Sim ## 8581 ppb 16 - Sim ## 8582 ppb NA - Sim Qua dificultades tu já enfrentou importando dados? 4.2 BASE 4.2.1 Exportando texto com write.table Exportar é bem facil, mas se sabemos os argumentos das funções, vai ser mais eficiente ainda. Vamos write.table args(write.table) ## function (x, file = &quot;&quot;, append = FALSE, quote = TRUE, sep = &quot; &quot;, ## eol = &quot;\\n&quot;, na = &quot;NA&quot;, dec = &quot;.&quot;, row.names = TRUE, col.names = TRUE, ## qmethod = c(&quot;escape&quot;, &quot;double&quot;), fileEncoding = &quot;&quot;) ## NULL Se temos um data-frame com colunas de classe character, quote = TRUE quer dizer que o arquivo de texto resultante vai ter aspas nas colunas de caracter. sep é como vão ser separadas as colunas. Se tu quer abrir o arquivo com Excel, poderia separar com “,”, “;”, &quot; “,”“… Depende como tu quer. eol quer dizer end of line, e é para ver a forma de colocar o “end of line” row.names.. esta TRUE mas SEMPRE SEMPRE SEMPRE COLOCA: row.names = FALSE. Se não, R vai adiiconar uma coluna com os indices das linhas…. col.names se tu quer o nome nas colunas… PRATICA! 4.2.2 Exportando objetos com save args(save) ## function (..., list = character(), file = stop(&quot;&#39;file&#39; must be specified&quot;), ## ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), ## compression_level, eval.promises = TRUE, precheck = TRUE) ## NULL save salva o objeto com a extensão .rda. Para carregar de volta o objeto, tem que ser feito com a função load args(load) ## function (file, envir = parent.frame(), verbose = FALSE) ## NULL O que pode ser ruim, porque as vezes tu esqueceu o nome do objeto no ambiente de R. Por exemplo, tu salvou o arquivo save(frenteFria, file = &quot;FrenteQuente.rda&quot;) logo tu carrega load(&quot;FrenteQuente.rda&quot;) acreditando que vai ter tua frente quente, mas o nome do objeto no ambiente de R é frenteDria… então, tem que ficar de olho, e como somos imperfeito, vai dar merda…. O melhor da função é que permite salvar com tipos de compressão, por exemplo compress = “xz”. 4.2.3 Exportando objetos com saveRDS Esta é uma das minhas funçoes favoritas no R args(saveRDS) ## function (object, file = &quot;&quot;, ascii = FALSE, version = NULL, compress = TRUE, ## refhook = NULL) ## NULL e args(readRDS) ## function (file, refhook = NULL) ## NULL Tu consegue salvar o objeto R de forma serializada e compactada com o argumento compress mas o melhor é quando vai chamar o objeto de volta ao R. Agora tu usa o readRDS e coloca o nome que tu quiser. saveRDS(FrenteQuente, &quot;FrenteQuente.rds&quot;) frenteQ &lt;- readRDS(&quot;FremteQuente.rds&quot;) 4.2.4 Processando nossa data-frame Tem numeroas formas e pacotes para ordenar, arrangiar (Arrange), mutar e cambiar as data-frames. As mais conhecidas são provablemente do universe tidyverse com o famoso pacote dplyr. Mas, nesta curso vamos focar em base. Vamos então revisar a classe de cada columna do nosso data-frame com a função sapply, apresentada em outro capitulo, mas se quiser, da uma olhada em ?sapply. sapply(df, class) ## TipodeRede TipodeMonitoramento Tipo ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## Data Hora CodigoEstação ## &quot;factor&quot; &quot;factor&quot; &quot;integer&quot; ## NomeEstação NomeParâmetro UnidadedeMedida ## &quot;factor&quot; &quot;factor&quot; &quot;factor&quot; ## MediaHoraria MediaMovel Valido ## &quot;integer&quot; &quot;factor&quot; &quot;factor&quot; Quando nos trabalhamos com series de tempo, é importante ter a variabel de tempo reconhecida como “tempo”, especificamente como classe “POSIXct”. Mas, a classe de Data é “factor” e de Hora tambem “factor”, o que é ruim. Então, vamos criar uma variabel de tempo mais standard com formato 2018-05-28 22:31:00. Para isso temos que grudar as variabel Data e Hora. Faremios isso numa nova varaibel chamada tempo_char, adicionando ela diretamente no df com o cifrão DOLLAR $. O grude pode ser feito com as funções paste ou paste0. df$tempo_char &lt;- paste(df$Data, df$Hora) head(df$tempo_char) ## [1] &quot;01/01/2014 01:00&quot; &quot;01/01/2014 02:00&quot; &quot;01/01/2014 03:00&quot; ## [4] &quot;01/01/2014 04:00&quot; &quot;01/01/2014 05:00&quot; &quot;01/01/2014 06:00&quot; class(df$tempo_char) ## [1] &quot;character&quot; Esta melhorando mas ainda tem clase character. Para convertir a nossa classe POSIXct podemos usar a função as.POSIXct (olha as.POSIXct). Seus argumentos são: args(as.POSIXct) ## function (x, tz = &quot;&quot;, ...) ## NULL Então, vamos criar outra variabel tempo o formato POSIXct df$tempo &lt;- as.POSIXct(x = df$tempo_char, tz = &quot;Americas/Sao_Paulo&quot;, format = &quot;%d/%m/%Y %H:%M&quot;) head(df$tempo) ## [1] &quot;2014-01-01 01:00:00 Americas&quot; &quot;2014-01-01 02:00:00 Americas&quot; ## [3] &quot;2014-01-01 03:00:00 Americas&quot; &quot;2014-01-01 04:00:00 Americas&quot; ## [5] &quot;2014-01-01 05:00:00 Americas&quot; &quot;2014-01-01 06:00:00 Americas&quot; class(df$tempo) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Agora, vamos a extraer os dias da semana do tempo, mes e dia juliano: df$weekdays &lt;- format(df$tempo, &quot;%A&quot;) head(df$weekdays) ## [1] &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; &quot;quarta&quot; df$mes &lt;- format(df$tempo, &quot;%B&quot;) head(df$mes) ## [1] &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; &quot;janeiro&quot; df$diajuliano &lt;- julian(df$tempo) head(df$diajuliano) ## Time differences in days ## [1] 16071.04 16071.08 16071.12 16071.17 16071.21 16071.25 df$ano &lt;- format(df$tempo, &quot;%Y&quot;) 4.2.5 aggregate Vamos a carregar a nossa data.frame. Primero uma olhada head(df) ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - Não 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta janeiro 16071.25 days 2014 Poderiamos calcular a media horaria por dia da semana. Então: dff &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T) dff ## Group.1 x ## 1 domingo 20327 ## 2 quarta 40180 ## 3 quinta 41199 ## 4 sábado 32298 ## 5 segunda 34057 ## 6 sexta 42558 ## 7 terça 37904 names(dff) &lt;- c(&quot;dias&quot;, &quot;MediaHoraria&quot;) dff$sd &lt;- aggregate(df$MediaHoraria, by = list(df$weekdays), sum, na.rm = T)$x dff ## dias MediaHoraria sd ## 1 domingo 20327 20327 ## 2 quarta 40180 40180 ## 3 quinta 41199 41199 ## 4 sábado 32298 32298 ## 5 segunda 34057 34057 ## 6 sexta 42558 42558 ## 7 terça 37904 37904 4.2.6 subset Como poderiamos escolher só o mes de janeiro?? #[ LINHAS , COLUNAS ] head(df[df$mes == &quot;janeiro&quot;, ]) #TODAS AS COLUNAS ## TipodeRede TipodeMonitoramento Tipo Data Hora ## 2 Automático CETESB Dados Primários 01/01/2014 01:00 ## 3 Automático CETESB Dados Primários 01/01/2014 02:00 ## 4 Automático CETESB Dados Primários 01/01/2014 03:00 ## 5 Automático CETESB Dados Primários 01/01/2014 04:00 ## 6 Automático CETESB Dados Primários 01/01/2014 05:00 ## 7 Automático CETESB Dados Primários 01/01/2014 06:00 ## CodigoEstação NomeEstação NomeParâmetro ## 2 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 3 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 4 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 5 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 6 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## 7 95 Cid.Universitária-USP-Ipen NOx (Óxidos de Nitrogênio) ## UnidadedeMedida MediaHoraria MediaMovel Valido tempo_char ## 2 ppb 9 - Não 01/01/2014 01:00 ## 3 ppb 9 - Sim 01/01/2014 02:00 ## 4 ppb 5 - Sim 01/01/2014 03:00 ## 5 ppb 4 - Sim 01/01/2014 04:00 ## 6 ppb 5 - Sim 01/01/2014 05:00 ## 7 ppb 5 - Sim 01/01/2014 06:00 ## tempo weekdays mes diajuliano ano ## 2 2014-01-01 01:00:00 quarta janeiro 16071.04 days 2014 ## 3 2014-01-01 02:00:00 quarta janeiro 16071.08 days 2014 ## 4 2014-01-01 03:00:00 quarta janeiro 16071.12 days 2014 ## 5 2014-01-01 04:00:00 quarta janeiro 16071.17 days 2014 ## 6 2014-01-01 05:00:00 quarta janeiro 16071.21 days 2014 ## 7 2014-01-01 06:00:00 quarta janeiro 16071.25 days 2014 Mes janeiro pero solo o valor mediahoraria, que retorna um vetor numerico names(df) ## [1] &quot;TipodeRede&quot; &quot;TipodeMonitoramento&quot; &quot;Tipo&quot; ## [4] &quot;Data&quot; &quot;Hora&quot; &quot;CodigoEstação&quot; ## [7] &quot;NomeEstação&quot; &quot;NomeParâmetro&quot; &quot;UnidadedeMedida&quot; ## [10] &quot;MediaHoraria&quot; &quot;MediaMovel&quot; &quot;Valido&quot; ## [13] &quot;tempo_char&quot; &quot;tempo&quot; &quot;weekdays&quot; ## [16] &quot;mes&quot; &quot;diajuliano&quot; &quot;ano&quot; head(df[df$mes == &quot;janeiro&quot;, 10]) ## [1] 9 9 5 4 5 5 head(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] 9 9 5 4 5 5 class(df[df$mes == &quot;janeiro&quot;, &quot;MediaHoraria&quot;]) ## [1] &quot;integer&quot; Mas vamos salvar o nosso “df” saveRDS(df, &quot;dados/df.rds&quot;) 4.2.7 data.table, read_xl e mais data.table é um pacote que apresenta a classe data.table, que é como uma versão melhorada da classe data-frame O termo especifico é que data-table tem herencia (inherits) da classe data.frame Vamos ver como funciona data.table lendo o dois arquivos e comparar quanto tempo demoram cada um. df1 &lt;- print(system.time(read.table(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.121 0.007 0.397 library(data.table) df2 &lt;- print(system.time(fread(&quot;https://raw.githubusercontent.com/ibarraespinosa/cursoR/master/dados/NOXIPEN2014.txt&quot;, h = T))) ## user system elapsed ## 0.040 0.007 0.613 olha que estamos usando a função fread. read_xl é mais uma função do universo tidyverse que permite importar excel no R, diretamente e inteligentemente. 4.3 Tidyverse 4.3.1 Leitura %&gt;% Processamento 4.4 Outros Tipos de Dados 4.4.1 NetCDF O NetCDF (Network Common Data Form) é um conjunto de bibliotecas de software e formatos de dados independentes de máquina e autodescritivos com suporte para criação, acesso e compartilhamento de dados científicos orientados a matrizes. Arquivos NetCDF (criado por essa biblioteca ou por programas que utilizam essa biblioteca) são arquivos compostos por dados, atributos e metadados. O pacote ncdf4 pode ser usado para acessar a essa biblioteca, os comandos abaixo instalam e carregam esse pacote: #install.packages(&quot;ncdf4&quot;) # instala o pacote library(&quot;ncdf4&quot;) # carrega o pacote nc_version() # que retorna a versão da biblioteca ## [1] &quot;ncdf4_1.16_20170401&quot; Um exmplo de NetCDF: download.file(&quot;https://github.com/ibarraespinosa/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc&quot;, destfile = &quot;~/met_em.d03.2016-01-10.nc&quot;) wrf &lt;- ncdf4::nc_open(&quot;~/met_em.d03.2016-01-10.nc&quot;) O objeto wrf contém algumas informações sobre o conteúdo do arquivo, com um print(wrf) ou simplesmente wrf visualizamos o conteúdo do arquivo: class(wrf) ## [1] &quot;ncdf4&quot; wrf ## File ~/met_em.d03.2016-01-10.nc (NC_FORMAT_64BIT): ## ## 92 variables (excluding dimension variables): ## char Times[DateStrLen,Time] ## float PRES[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOIL_LAYERS[west_east,south_north,num_st_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM[west_east,south_north,num_sm_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST[west_east,south_north,num_st_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float GHT[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m ## description: Height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float HGTTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Height of tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float TTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Temperature at tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PTROPNN[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: PTROP, used for nearest neighbor interp ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Pressure of tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VTROP[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: V at tropopause ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UTROP[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: U at tropopause ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float HGTMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Height of max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float TMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Temperature at max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMAXWNN[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: PMAXW, used for nearest neighbor interp ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Pressure of max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VMAXW[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: V at max wind ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UMAXW[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: U at max wind ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float SNOWH[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Physical Snow Depth ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SNOW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: kg m-2 ## description: Water equivalent snow depth ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SKINTEMP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Skin temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILHGT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Terrain field of source analysis ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LANDSEA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: proprtn ## description: Land/Sea flag (1=land, 0 or 2=sea) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SEAICE[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: proprtn ## description: Ice flag ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST100200[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 100-200 cm below ground layer (Bottom) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST040100[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 40-100 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST010040[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 10-40 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST000010[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 0-10 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM100200[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 100-200 cm below gr layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM040100[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 40-100 cm below grn layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM010040[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 10-40 cm below grn layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM000010[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 0-10 cm below grn layer (Up) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PSFC[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Surface Pressure ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float RH[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: % ## description: Relative Humidity ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VV[west_east,south_north_stag,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m s-1 ## description: V ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UU[west_east_stag,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m s-1 ## description: U ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float TT[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: K ## description: Temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMSL[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Sea-level Pressure ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float URB_PARAM[west_east,south_north,z-dimension0132,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: dimensionless ## description: Urban_Parameters ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LAKE_DEPTH[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters MSL ## description: Topography height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VAR_SSO[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters2 MSL ## description: Variance of Subgrid Scale Orography ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL4[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL3[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL2[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL1[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA4[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA3[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA2[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA1[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VAR[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CON[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SLOPECAT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SNOALB[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: percent ## description: Maximum snow albedo ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LAI12M[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m^2/m^2 ## description: MODIS LAI ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float GREENFRAC[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: fraction ## description: MODIS FPAR ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ALBEDO12M[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: percent ## description: Monthly surface albedo ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SCB_DOM[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILCBOT[west_east,south_north,z-dimension0016,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 16-category bottom-layer soil type ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SCT_DOM[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILCTOP[west_east,south_north,z-dimension0016,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 16-category top-layer soil type ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILTEMP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Kelvin ## description: Annual mean deep soil temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float HGT_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters MSL ## description: GMTED2010 30-arc-second topography height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LU_INDEX[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LANDUSEF[west_east,south_north,z-dimension0024,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 24-category USGS landuse ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float COSALPHA_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float SINALPHA_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float COSALPHA_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float SINALPHA_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLONG_C[west_east_stag,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude at grid cell corners ## stagger: CORNER ## sr_x: 1 ## sr_y: 1 ## float XLAT_C[west_east_stag,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude at grid cell corners ## stagger: CORNER ## sr_x: 1 ## sr_y: 1 ## float LANDMASK[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Landmask : 1=land, 0=water ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float COSALPHA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SINALPHA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float F[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: - ## description: Coriolis F parameter ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float E[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: - ## description: Coriolis E parameter ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_UY[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_VY[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_MY[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_UX[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_VX[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_MX[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CLONG[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Computational longitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CLAT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Computational latitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float XLONG_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLAT_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLONG_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float XLAT_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float XLONG_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float XLAT_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## ## 13 dimensions: ## Time Size:1 *** is unlimited *** ## DateStrLen Size:19 ## west_east Size:51 ## south_north Size:51 ## num_metgrid_levels Size:27 ## num_st_layers Size:4 ## num_sm_layers Size:4 ## south_north_stag Size:52 ## west_east_stag Size:52 ## z-dimension0132 Size:132 ## z-dimension0012 Size:12 ## z-dimension0016 Size:16 ## z-dimension0024 Size:24 ## ## 76 global attributes: ## TITLE: OUTPUT FROM METGRID V3.9.1 ## SIMULATION_START_DATE: 2016-01-10_00:00:00 ## WEST-EAST_GRID_DIMENSION: 52 ## SOUTH-NORTH_GRID_DIMENSION: 52 ## BOTTOM-TOP_GRID_DIMENSION: 27 ## WEST-EAST_PATCH_START_UNSTAG: 1 ## WEST-EAST_PATCH_END_UNSTAG: 51 ## WEST-EAST_PATCH_START_STAG: 1 ## WEST-EAST_PATCH_END_STAG: 52 ## SOUTH-NORTH_PATCH_START_UNSTAG: 1 ## SOUTH-NORTH_PATCH_END_UNSTAG: 51 ## SOUTH-NORTH_PATCH_START_STAG: 1 ## SOUTH-NORTH_PATCH_END_STAG: 52 ## GRIDTYPE: C ## DX: 1000 ## DY: 1000 ## DYN_OPT: 2 ## CEN_LAT: -23.5996932983398 ## CEN_LON: -46.6294555664062 ## TRUELAT1: -23 ## TRUELAT2: -24 ## MOAD_CEN_LAT: -23.6000061035156 ## STAND_LON: -45 ## POLE_LAT: 90 ## POLE_LON: 0 ## corner_lats: -23.8218078613281 ## corner_lats: -23.3720855712891 ## corner_lats: -23.3771743774414 ## corner_lats: -23.826904296875 ## corner_lats: -23.8217391967773 ## corner_lats: -23.3720245361328 ## corner_lats: -23.3772277832031 ## corner_lats: -23.8269424438477 ## corner_lats: -23.826286315918 ## corner_lats: -23.3675918579102 ## corner_lats: -23.372673034668 ## corner_lats: -23.8314056396484 ## corner_lats: -23.8262329101562 ## corner_lats: -23.3675231933594 ## corner_lats: -23.3727111816406 ## corner_lats: -23.8314437866211 ## corner_lons: -46.8780517578125 ## corner_lons: -46.8716430664062 ## corner_lons: -46.3817138671875 ## corner_lons: -46.3864440917969 ## corner_lons: -46.8829650878906 ## corner_lons: -46.8765258789062 ## corner_lons: -46.3768005371094 ## corner_lons: -46.3815307617188 ## corner_lons: -46.8781127929688 ## corner_lons: -46.87158203125 ## corner_lons: -46.3816528320312 ## corner_lons: -46.386474609375 ## corner_lons: -46.8830261230469 ## corner_lons: -46.87646484375 ## corner_lons: -46.3767700195312 ## corner_lons: -46.3815612792969 ## MAP_PROJ: 1 ## MMINLU: USGS ## NUM_LAND_CAT: 24 ## ISWATER: 16 ## ISLAKE: -1 ## ISICE: 24 ## ISURBAN: 1 ## ISOILWATER: 14 ## grid_id: 3 ## parent_id: 2 ## i_parent_start: 35 ## j_parent_start: 33 ## i_parent_end: 51 ## j_parent_end: 49 ## parent_grid_ratio: 3 ## sr_x: 1 ## sr_y: 1 ## NUM_METGRID_SOIL_LEVELS: 4 ## FLAG_METGRID: 1 ## FLAG_EXCLUDED_MIDDLE: 0 ## FLAG_SOIL_LAYERS: 1 ## FLAG_SNOW: 1 ## FLAG_PSFC: 1 ## FLAG_SM000010: 1 ## FLAG_SM010040: 1 ## FLAG_SM040100: 1 ## FLAG_SM100200: 1 ## FLAG_ST000010: 1 ## FLAG_ST010040: 1 ## FLAG_ST040100: 1 ## FLAG_ST100200: 1 ## FLAG_SLP: 1 ## FLAG_SNOWH: 1 ## FLAG_SOILHGT: 1 ## FLAG_UTROP: 1 ## FLAG_VTROP: 1 ## FLAG_TTROP: 1 ## FLAG_PTROP: 1 ## FLAG_PTROPNN: 1 ## FLAG_HGTTROP: 1 ## FLAG_UMAXW: 1 ## FLAG_VMAXW: 1 ## FLAG_TMAXW: 1 ## FLAG_PMAXW: 1 ## FLAG_PMAXWNN: 1 ## FLAG_HGTMAXW: 1 ## FLAG_MF_XY: 1 ## FLAG_LAI12M: 1 ## FLAG_LAKE_DEPTH: 1 que mostra o nome do arquivo (e versão da biblioteca usada para criar), número de variáveis (92 no arquivo de exemplo), uma descrição de cada variável (incluindo atributos) as dimensões (13 para esse arquivo) e os atributos globais. Agora vamos abrir alguma variável: names(wrf$var) # print no nome de cada variavel ## [1] &quot;Times&quot; &quot;PRES&quot; &quot;SOIL_LAYERS&quot; &quot;SM&quot; &quot;ST&quot; ## [6] &quot;GHT&quot; &quot;HGTTROP&quot; &quot;TTROP&quot; &quot;PTROPNN&quot; &quot;PTROP&quot; ## [11] &quot;VTROP&quot; &quot;UTROP&quot; &quot;HGTMAXW&quot; &quot;TMAXW&quot; &quot;PMAXWNN&quot; ## [16] &quot;PMAXW&quot; &quot;VMAXW&quot; &quot;UMAXW&quot; &quot;SNOWH&quot; &quot;SNOW&quot; ## [21] &quot;SKINTEMP&quot; &quot;SOILHGT&quot; &quot;LANDSEA&quot; &quot;SEAICE&quot; &quot;ST100200&quot; ## [26] &quot;ST040100&quot; &quot;ST010040&quot; &quot;ST000010&quot; &quot;SM100200&quot; &quot;SM040100&quot; ## [31] &quot;SM010040&quot; &quot;SM000010&quot; &quot;PSFC&quot; &quot;RH&quot; &quot;VV&quot; ## [36] &quot;UU&quot; &quot;TT&quot; &quot;PMSL&quot; &quot;URB_PARAM&quot; &quot;LAKE_DEPTH&quot; ## [41] &quot;VAR_SSO&quot; &quot;OL4&quot; &quot;OL3&quot; &quot;OL2&quot; &quot;OL1&quot; ## [46] &quot;OA4&quot; &quot;OA3&quot; &quot;OA2&quot; &quot;OA1&quot; &quot;VAR&quot; ## [51] &quot;CON&quot; &quot;SLOPECAT&quot; &quot;SNOALB&quot; &quot;LAI12M&quot; &quot;GREENFRAC&quot; ## [56] &quot;ALBEDO12M&quot; &quot;SCB_DOM&quot; &quot;SOILCBOT&quot; &quot;SCT_DOM&quot; &quot;SOILCTOP&quot; ## [61] &quot;SOILTEMP&quot; &quot;HGT_M&quot; &quot;LU_INDEX&quot; &quot;LANDUSEF&quot; &quot;COSALPHA_V&quot; ## [66] &quot;SINALPHA_V&quot; &quot;COSALPHA_U&quot; &quot;SINALPHA_U&quot; &quot;XLONG_C&quot; &quot;XLAT_C&quot; ## [71] &quot;LANDMASK&quot; &quot;COSALPHA&quot; &quot;SINALPHA&quot; &quot;F&quot; &quot;E&quot; ## [76] &quot;MAPFAC_UY&quot; &quot;MAPFAC_VY&quot; &quot;MAPFAC_MY&quot; &quot;MAPFAC_UX&quot; &quot;MAPFAC_VX&quot; ## [81] &quot;MAPFAC_MX&quot; &quot;MAPFAC_U&quot; &quot;MAPFAC_V&quot; &quot;MAPFAC_M&quot; &quot;CLONG&quot; ## [86] &quot;CLAT&quot; &quot;XLONG_U&quot; &quot;XLAT_U&quot; &quot;XLONG_V&quot; &quot;XLAT_V&quot; ## [91] &quot;XLONG_M&quot; &quot;XLAT_M&quot; TEMP &lt;- ncdf4::ncvar_get(wrf, &quot;TT&quot;) # escolho você picachu class(TEMP) ## [1] &quot;array&quot; Como o NetCDF é organizado para guardar matrizes (arrays), só sabemos que a variável ST é um array ncatt_get(wrf,&quot;TT&quot;) # ou ncatt_get(wrf,&quot;TT&quot;,verbose = T) ## $FieldType ## [1] 104 ## ## $MemoryOrder ## [1] &quot;XYZ&quot; ## ## $units ## [1] &quot;K&quot; ## ## $description ## [1] &quot;Temperature&quot; ## ## $stagger ## [1] &quot;M&quot; ## ## $sr_x ## [1] 1 ## ## $sr_y ## [1] 1 dim(TEMP) ## [1] 51 51 27 praticamente a mesma informação do print anterior: float TT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: K description: Temperature stagger: M sr_x: 1 sr_y: 1 como temos apenas 1 tempo essa dimensão é desconsiderada para simplificar. A latitude de cada ponto de grade, assim como longitude níveis e tempo podem ser extraídas: lat &lt;- ncvar_get(wrf, &quot;XLAT_M&quot;) lon &lt;- ncvar_get(wrf, &quot;XLONG_M&quot;) time &lt;- ncvar_get(wrf, &quot;Times&quot;) O metadado de Longitude: float XLONG_M[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees longitude description: Longitude on mass grid stagger: M sr_x: 1 sr_y: 1 Latitude: float XLAT_M[west_east,south_north,Time] FieldType: 104 MemoryOrder: XY units: degrees latitude description: Latitude on mass grid stagger: M sr_x: 1 sr_y: 1 e a altura: float GHT[west_east,south_north,num_metgrid_levels,Time] FieldType: 104 MemoryOrder: XYZ units: m description: Height stagger: M sr_x: 1 sr_y: 1 Da mesma forma com que podemos acessar variáveis e atributos com ncvar_get e ncatt_get, podemos modificar estes valores com ncvar_put e ncatt_put. Outras operações como renomear (ncvar_rename) e trocar o valor de missval (ncvar_change_missval) também estão disponíveis. DICA: ncatt_get e ncatt_put acessam e alteram os atributos de váriaveis e também atributos globais do NetCDF usando o argumento varid=0. Para salvar as alterações e/ou liberar o acesso ao arquivo use a função nc_close (ou a função nc_sync que sincroniza o NetCDF mas não fecha a conexão com o arquivo). nc_close(wrf) # ou nc_sync(wrf) Novas dimensões e também novas variáveis podem ser criadas com ncvar_def e ncvar_add em um arquivo aberto com permissão de leitura, como por exemplo: wrf &lt;- nc_open(&quot;~/met_em.d03.2016-01-10.nc&quot;, write=TRUE) extrema &lt;- ncvar_def(name = &quot;Tex&quot;, units = &quot;K&quot;, dim = list(wrf$dim$west_east, wrf$dim$south_north, wrf$dim$Time), missval = -999, longname = &quot;temperatura extrema&quot;) ncvar_add(wrf, extrema) names(wrf$var) nc_close(wrf) Se esse arquivo for aberto novamente vai conter 93 variáveis junto com a variável Tex da forma que definimos, caso queria os mesmos atributos que as demais é só usar a função ncatt_get na variável. wrf &lt;- nc_open(&quot;~/met_em.d03.2016-01-10.nc&quot;,write=T) print(wrf) ## File ~/met_em.d03.2016-01-10.nc (NC_FORMAT_64BIT): ## ## 92 variables (excluding dimension variables): ## char Times[DateStrLen,Time] ## float PRES[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOIL_LAYERS[west_east,south_north,num_st_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM[west_east,south_north,num_sm_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST[west_east,south_north,num_st_layers,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: ## description: ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float GHT[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m ## description: Height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float HGTTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Height of tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float TTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Temperature at tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PTROPNN[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: PTROP, used for nearest neighbor interp ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PTROP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Pressure of tropopause ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VTROP[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: V at tropopause ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UTROP[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: U at tropopause ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float HGTMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Height of max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float TMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Temperature at max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMAXWNN[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: PMAXW, used for nearest neighbor interp ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMAXW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Pressure of max wind level ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VMAXW[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: V at max wind ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UMAXW[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m s-1 ## description: U at max wind ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float SNOWH[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Physical Snow Depth ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SNOW[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: kg m-2 ## description: Water equivalent snow depth ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SKINTEMP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: Skin temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILHGT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: m ## description: Terrain field of source analysis ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LANDSEA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: proprtn ## description: Land/Sea flag (1=land, 0 or 2=sea) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SEAICE[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: proprtn ## description: Ice flag ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST100200[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 100-200 cm below ground layer (Bottom) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST040100[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 40-100 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST010040[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 10-40 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ST000010[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: K ## description: T 0-10 cm below ground layer (Upper) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM100200[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 100-200 cm below gr layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM040100[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 40-100 cm below grn layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM010040[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 10-40 cm below grn layer ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SM000010[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: fraction ## description: Soil Moist 0-10 cm below grn layer (Up) ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PSFC[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Surface Pressure ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float RH[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: % ## description: Relative Humidity ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VV[west_east,south_north_stag,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m s-1 ## description: V ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float UU[west_east_stag,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m s-1 ## description: U ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float TT[west_east,south_north,num_metgrid_levels,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: K ## description: Temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float PMSL[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Pa ## description: Sea-level Pressure ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float URB_PARAM[west_east,south_north,z-dimension0132,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: dimensionless ## description: Urban_Parameters ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LAKE_DEPTH[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters MSL ## description: Topography height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VAR_SSO[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters2 MSL ## description: Variance of Subgrid Scale Orography ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL4[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL3[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL2[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OL1[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA4[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA3[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA2[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float OA1[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float VAR[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CON[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: whoknows ## description: something ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SLOPECAT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SNOALB[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: percent ## description: Maximum snow albedo ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LAI12M[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: m^2/m^2 ## description: MODIS LAI ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float GREENFRAC[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: fraction ## description: MODIS FPAR ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float ALBEDO12M[west_east,south_north,z-dimension0012,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: percent ## description: Monthly surface albedo ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SCB_DOM[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILCBOT[west_east,south_north,z-dimension0016,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 16-category bottom-layer soil type ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SCT_DOM[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILCTOP[west_east,south_north,z-dimension0016,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 16-category top-layer soil type ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SOILTEMP[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: Kelvin ## description: Annual mean deep soil temperature ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float HGT_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: meters MSL ## description: GMTED2010 30-arc-second topography height ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LU_INDEX[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: category ## description: Dominant category ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float LANDUSEF[west_east,south_north,z-dimension0024,Time] ## FieldType: 104 ## MemoryOrder: XYZ ## units: category ## description: 24-category USGS landuse ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float COSALPHA_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float SINALPHA_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float COSALPHA_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float SINALPHA_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLONG_C[west_east_stag,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude at grid cell corners ## stagger: CORNER ## sr_x: 1 ## sr_y: 1 ## float XLAT_C[west_east_stag,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude at grid cell corners ## stagger: CORNER ## sr_x: 1 ## sr_y: 1 ## float LANDMASK[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Landmask : 1=land, 0=water ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float COSALPHA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Cosine of rotation angle ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float SINALPHA[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Sine of rotation angle ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float F[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: - ## description: Coriolis F parameter ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float E[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: - ## description: Coriolis E parameter ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_UY[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_VY[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_MY[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (y-dir) on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_UX[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_VX[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_MX[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor (x-dir) on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float MAPFAC_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: none ## description: Mapfactor on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CLONG[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Computational longitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float CLAT[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Computational latitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float XLONG_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLAT_U[west_east_stag,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on U grid ## stagger: U ## sr_x: 1 ## sr_y: 1 ## float XLONG_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float XLAT_V[west_east,south_north_stag,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on V grid ## stagger: V ## sr_x: 1 ## sr_y: 1 ## float XLONG_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees longitude ## description: Longitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## float XLAT_M[west_east,south_north,Time] ## FieldType: 104 ## MemoryOrder: XY ## units: degrees latitude ## description: Latitude on mass grid ## stagger: M ## sr_x: 1 ## sr_y: 1 ## ## 13 dimensions: ## Time Size:1 *** is unlimited *** ## DateStrLen Size:19 ## west_east Size:51 ## south_north Size:51 ## num_metgrid_levels Size:27 ## num_st_layers Size:4 ## num_sm_layers Size:4 ## south_north_stag Size:52 ## west_east_stag Size:52 ## z-dimension0132 Size:132 ## z-dimension0012 Size:12 ## z-dimension0016 Size:16 ## z-dimension0024 Size:24 ## ## 76 global attributes: ## TITLE: OUTPUT FROM METGRID V3.9.1 ## SIMULATION_START_DATE: 2016-01-10_00:00:00 ## WEST-EAST_GRID_DIMENSION: 52 ## SOUTH-NORTH_GRID_DIMENSION: 52 ## BOTTOM-TOP_GRID_DIMENSION: 27 ## WEST-EAST_PATCH_START_UNSTAG: 1 ## WEST-EAST_PATCH_END_UNSTAG: 51 ## WEST-EAST_PATCH_START_STAG: 1 ## WEST-EAST_PATCH_END_STAG: 52 ## SOUTH-NORTH_PATCH_START_UNSTAG: 1 ## SOUTH-NORTH_PATCH_END_UNSTAG: 51 ## SOUTH-NORTH_PATCH_START_STAG: 1 ## SOUTH-NORTH_PATCH_END_STAG: 52 ## GRIDTYPE: C ## DX: 1000 ## DY: 1000 ## DYN_OPT: 2 ## CEN_LAT: -23.5996932983398 ## CEN_LON: -46.6294555664062 ## TRUELAT1: -23 ## TRUELAT2: -24 ## MOAD_CEN_LAT: -23.6000061035156 ## STAND_LON: -45 ## POLE_LAT: 90 ## POLE_LON: 0 ## corner_lats: -23.8218078613281 ## corner_lats: -23.3720855712891 ## corner_lats: -23.3771743774414 ## corner_lats: -23.826904296875 ## corner_lats: -23.8217391967773 ## corner_lats: -23.3720245361328 ## corner_lats: -23.3772277832031 ## corner_lats: -23.8269424438477 ## corner_lats: -23.826286315918 ## corner_lats: -23.3675918579102 ## corner_lats: -23.372673034668 ## corner_lats: -23.8314056396484 ## corner_lats: -23.8262329101562 ## corner_lats: -23.3675231933594 ## corner_lats: -23.3727111816406 ## corner_lats: -23.8314437866211 ## corner_lons: -46.8780517578125 ## corner_lons: -46.8716430664062 ## corner_lons: -46.3817138671875 ## corner_lons: -46.3864440917969 ## corner_lons: -46.8829650878906 ## corner_lons: -46.8765258789062 ## corner_lons: -46.3768005371094 ## corner_lons: -46.3815307617188 ## corner_lons: -46.8781127929688 ## corner_lons: -46.87158203125 ## corner_lons: -46.3816528320312 ## corner_lons: -46.386474609375 ## corner_lons: -46.8830261230469 ## corner_lons: -46.87646484375 ## corner_lons: -46.3767700195312 ## corner_lons: -46.3815612792969 ## MAP_PROJ: 1 ## MMINLU: USGS ## NUM_LAND_CAT: 24 ## ISWATER: 16 ## ISLAKE: -1 ## ISICE: 24 ## ISURBAN: 1 ## ISOILWATER: 14 ## grid_id: 3 ## parent_id: 2 ## i_parent_start: 35 ## j_parent_start: 33 ## i_parent_end: 51 ## j_parent_end: 49 ## parent_grid_ratio: 3 ## sr_x: 1 ## sr_y: 1 ## NUM_METGRID_SOIL_LEVELS: 4 ## FLAG_METGRID: 1 ## FLAG_EXCLUDED_MIDDLE: 0 ## FLAG_SOIL_LAYERS: 1 ## FLAG_SNOW: 1 ## FLAG_PSFC: 1 ## FLAG_SM000010: 1 ## FLAG_SM010040: 1 ## FLAG_SM040100: 1 ## FLAG_SM100200: 1 ## FLAG_ST000010: 1 ## FLAG_ST010040: 1 ## FLAG_ST040100: 1 ## FLAG_ST100200: 1 ## FLAG_SLP: 1 ## FLAG_SNOWH: 1 ## FLAG_SOILHGT: 1 ## FLAG_UTROP: 1 ## FLAG_VTROP: 1 ## FLAG_TTROP: 1 ## FLAG_PTROP: 1 ## FLAG_PTROPNN: 1 ## FLAG_HGTTROP: 1 ## FLAG_UMAXW: 1 ## FLAG_VMAXW: 1 ## FLAG_TMAXW: 1 ## FLAG_PMAXW: 1 ## FLAG_PMAXWNN: 1 ## FLAG_HGTMAXW: 1 ## FLAG_MF_XY: 1 ## FLAG_LAI12M: 1 ## FLAG_LAKE_DEPTH: 1 O pacote possue ainda funções mais específicas para a criação de arquivos em NetCDF como nc_create, funções que definem dimenções como ncdim_def e funções para colocar e tirar o arquivo de modo de definição nc_redef e nc_enddef. DICA: o NetCDF no R funciona de forma parecida com ouma lista ou data frame, podemos “ver” ou selecionar suas sub-partes (sub-sub-partes…) com “$” e TAB. 4.4.2 Dados Binários "]
]
