devtools::install_github("atmoschem/veinreport")
install.packages("devtools")
devtools::install_github("atmoschem/veinreport")
install.packages(c("vein", "sf"))
install.packages("devtools")
install.packages("devtools")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("maptools")
install.packages("mapview")
install.packages("fields")
install.packages("raster")
install.packages("sp")
install.packages("rgdal")
install.packages("ncdf4")
install.packages("data.table")
install.packages("openair")
install.packages("cptcity")
install.packages("vein")
devtools::install_github("atmoschem/veinreport")
devtools::install_github("atmoschem/veinreport")
library(veinreport)
library(cptcity)
wrf <- ncdf4::nc_open("dados/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
download.file("https://github.com/ibarraespinosa/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf     <- nc_open("dados/met_em.nc",write=T)
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
nc_version()              # que retorna a versão da biblioteca
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- nc_open("dados/met_em.nc")
close(wrf)
class(wrf)
wrf
head(wrf)
names(wrf$var)                # print no nome de cada variavel
TEMP <- ncdf4::ncvar_get(wrf, "TT")  # escolho você picachu
class(TEMP)
ncatt_get(wrf,"TT") # ou ncatt_get(wrf,"TT",verbose = T)
dim(TEMP)
lat  <- ncvar_get(wrf, "XLAT_M")
lon  <- ncvar_get(wrf, "XLONG_M")
time <- ncvar_get(wrf, "Times")
wrf     <- nc_open("dados/met_em.nc", write=TRUE)
getwd()
nc_close("dados/met_em.nc"
)
nc_close(wrf)
wrf <- ncdf4::nc_open("dados/met_em.nc")
download.file("https://github.com/ibarraespinosa/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf
wrf <- ncdf4::nc_open("dados/met_emnc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf
wrf <- ncdf4::nc_open("dados/met_em.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
nc_version()              # que retorna a versão da biblioteca
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc", verbose = T)
wrf <- nc_open("dados/met_em.nc", verbose = T)
download.file("https://github.com/iagdevs/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc", verbose = T)
wrf <- ncdf4::nc_open(filename = "dados/met_em.nc", verbose = T)
Sys.info()
sessionInfo()
library(ncdf4)
wrf <- readRDS(file.choose())
wrf <- readRDS("~/CURSOS/cursoR/dados/wrf.rds")
wrf
devtools::install_github("atmoschem/veinreport")
args(readBin)
.Platform$OS.type
args(readBin)
.Platform$endian
?readBin
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 2)
head(l1)
dims(l1)
dim(l1)
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*10,
size = 2)
head(l1)
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 4)
l1
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 2)
l2
l
l1
1349*1613
.Platform$endian
image(l1, col = cpt(find_cpt("sat")[12]))
#image(l1, col = cpt(find_cpt("sat")[12]))
plot(l1)
# :(
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
head(l2)
head(l2, 5)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura de brilho")
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
library("cpt")
image(l2,
col = cptcity::cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
library(cptcity)   # Para escolher facilmente uma paleta de cores legal.
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
```{r}
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
library(cptcity)   # Para escolher facilmente uma paleta de cores legal.
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
```{r}
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
l3 <- (t(l2[1:1349,1:1613]),
l3 <- (t(l2[1:1349,1:1613])
)
class(l3)
image(l3)
l3 <- (t(l2[1:1613, 1:1349]))
l3 <- t(l2[1:1349,1:1613])
class(l3)
image(l3)
?t
dimnames(l3)
dimnames(l2)
dimnames(l1)
r <- raster(nrow=18, ncol=36)
r[] <- 1:ncell(r)
rt <- t(r)
rt
r
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
sp::spplot(((l3 + 75)/100)-273, # http://www.cpc.ncep.noaa.gov/products/global_precip/html/README
col.regions = cpt(find_cpt("sat")[8]),
at = seq(-80,0,1),
main = "Temperatura de brilho (ºC)")
?t
a <- matrix(1:30, 5, 6)
ta <- t(a) ##-- i.e.,  a[i, j] == ta[j, i] for all i,j :
for(j in seq(ncol(a)))
if(! all(a[, j] == ta[j, ])) stop("wrong transpose")
a
ta
l3 <-t(l2[1:1349,1:1613])
image(l3)
l3
l3 <- raster(t(l2[1:1349,1:1613]))
l3
plot(l3)
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
dir.create("dados")
wrf <- ncdf4::nc_open(filename = "dados/met_em.nc", verbose = T)
getwd()
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
wrf <- ncdf4::nc_open("dados/met_em.d03.2016-01-10.nc")
wrf <- nc_open("dados/met_em.d03.2016-01-10.nc")
wrf <- nc_open("~/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("~/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("~/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("~/met_em.d03.2016-01-10.nc")
wrfinput_dir = system.file("extdata", package = "eixport")
wrfinput_dir
"/home/sergio/R/x86_64-pc-linux-gnu-library/3.4/eixport/extdata/wrfinput_d01"
wrfinput <- paste0(system.file("extdata", package = "eixport"), "wrfinput_d01"
wrf <- ncdf4::nc_open(wrfinput)
wrfinput
wrfinput <- paste0(system.file("extdata", package = "eixport"), "wrfinput_d01")
wrf <- ncdf4::nc_open(wrfinput)
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d01")
wrf <- ncdf4::nc_open(wrfinput)
getwd()
path <- getwd()
nome <- "SeuNome"
paste(path, "/-/_****;;;////", nome)
paste0(nome, 1:10) #Função vetorizada
paste(nome, 1:10) #Função vetorizada
paste0(nome, "_" 1:10) #Função vetorizada
paste0(nome, "_", 1:10) #Função vetorizada
runif(n = 100, min = 1, max = 100)
runif(n = 15, min = 1, max = 100)
round(runif(n = 50, min = 1, max = 100))
b <- round(runif(n = 50, min = 1, max = 100))
numeros[b] <- paste0(numeros, "?")
numeros <- 1:100
b <- round(runif(n = 50, min = 1, max = 100))
numeros[b] <- paste0(numeros, "?")
numeros
numeros <- 1:50
b <- round(runif(n = 10, min = 1, max = 50))
numeros[b] <- paste0(numeros, "?")
numeros
gsub(pattern = "?", replacement = "", x = numeros)
as.numeric(nn)
nn <- gsub(pattern = "?", replacement = "", x = numeros)
class(nn)
as.numeric(nn)
nn
as.numeric(nn)
nn
nn <- gsub(pattern = "?", replacement = "", x = numeros)
class(nn)
as.numeric(nn)
nn
nn <- gsub(pattern = "?", replacement = " ", x = numeros)
nn
numeros <- 1:50
b <- round(runif(n = 10, min = 1, max = 50))
numeros[b] <- paste0(numeros, "BB")
numeros
nn <- gsub(pattern = "BB", replacement = "", x = numeros)
class(nn)
as.numeric(nn)
nn
?subclassesMetaName
args(substr)
?substr
(numeros<- paste0(1:10, "BB"))
substr(numeros, 0, 2)
substr(numeros, 1, 2)
substr(numeros, 0, 3)
substr(numeros, 1, 3)
substr(numeros, 1, -2)
substr(numeros, 0, -2)
substr(numeros, 2, 0)
substr(numeros, 1, 0)
substr(numeros, 1, 1)
substr(numeros, 1, 2)
substr(numeros, 1, 1)
substr(numeros, 2, 1)
substr(numeros, 0, 1)
substr(numeros, 0, 2)
substr(numeros, 1, 2)
substr(numeros, 1, 1)
substr(numeros, 0, 1)
(numeros<- paste0(1:9, "BB"))
(numeros<- paste0(1:9, "BB"))
substr(numeros, 0, 1)
substr(numeros, 0, 2)
substr(numeros, 0, 4)
substr(numeros, 1, 3)
substr("abcdef", 2, 4)
substr(numeros, 2, 3)
substr(numeros, 0, 1)
substr(numeros, 2, 3)
args(data.frame)
args(merge)
args(cbind)
?merge
a <- data.frame(id = c("a", "b", "c"))
b <- data.frame(id = "Z", "b", "D"))
b <- data.frame(id = c("Z", "b", "D"))
a <- data.frame(id = c("a", "b", "c"))
b <- data.frame(id = c("Z", "b", "D"))
merge(x = a, y = b, by = "id")
merge(x = a, y = b, by = "id", all = T)
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d01")
wrf <- ncdf4::nc_close(wrfinput)
wrfinput
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d01")
wrf <- ncdf4::nc_close(wrfinput)
wrfinput
wrf <- ncdf4::nc_open(wrfinput)
class(wrf)
wrf
wrf[1:20]
wrf
wrf
wrf[1]
wrf[2]
names(Wrf)
names(wrf)
names(wrf$var)                # print no nome de cada variavel
TEMP <- ncdf4::ncvar_get(wrf, "TT")  # escolho você picachu
names(wrf$var)                # print no nome de cada variavel
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d02")
wrf <- ncdf4::nc_open(wrfinput)
names(wrf$var)                # print no nome de cada variavel
system.file("extdata", package = "eixport")
ncatt_get(wrf,"Times") # ou ncatt_get(wrf,"TT",verbose = T)
dim(TEMP)
names(wrf$var)                # print no nome de cada variavel
Times <- ncdf4::ncvar_get(wrf, "Times")  # escolho você picachu
class(Times)
ncatt_get(wrf,"Times") # ou ncatt_get(wrf,"TT",verbose = T)
dim(Times)
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
dim(Times)
lat  <- ncvar_get(wrf, "XLAT_M")
dim(Times)
lat  <- ncvar_get(wrf, "XLAT")
lon  <- ncvar_get(wrf, "XLONG")
time <- ncvar_get(wrf, "Times")
lat
nc_close(wrf) # ou nc_sync(wrf)
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d01")
Times <- ncdf4::ncvar_get(wrf, "Times")  # escolho você picachu
names(wrf$var)                # print no nome de cada variavel
Times <- ncdf4::ncvar_get(wrf, "Times")  # escolho você picachu
Times <- ncdf4::ncvar_get(wrf, varid = "Times")  # escolho você picachu
class(Times)
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
dim(Times)
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
dim(Times)
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
ncdf4::nc_close(wrfinput)
ncdf4::nc_close(wrf)
wrfinput <- paste0(system.file("extdata", package = "eixport"), "/wrfinput_d01")
wrf <- ncdf4::nc_open(wrfinput)
wrf
names(wrf$var)                # print no nome de cada variavel
ncatt_get(wrf,"Time", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
time <- ncvar_get(wrf, "Time")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
print(wrf)
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
time <- ncvar_get(wrf, "Times")
lat  <- ncvar_get(wrf, "XLAT")
lon  <- ncvar_get(wrf, "XLONG")
time <- ncvar_get(wrf, "Times")
ncatt_get(wrf,"Times", verbose = T) # ou ncatt_get(wrf,"TT",verbose = T)
dim(Times)
wrf <- ncdf4::nc_open("dados/met_em.d03.2016-01-10.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
nc_open("dados/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("dados/met_emd032016-01-10.nc")
wrf <- nc_open("dados/met_emd032016-01-10.nc")
df1 <- print(system.time(read.table("dados/NOXIPEN2014.txt", h = T)))
library(data.table)
df2 <- print(system.time(fread("dados/NOXIPEN2014.txt", h = T)))
wrf <- ncdf4::nc_open("/home/ccl/github_repos/cursoR/dados/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open(filename = "/home/ccl/github_repos/cursoR/dados/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("/home/ccl/Downloads/met_em.d03.2016-01-10.nc")
file.exists("/home/ccl/Downloads/met_em.d03.2016-01-10.nc")
file.exists("dados/met_em.d03.2016-01-10.nc")
file.path("dados")
file.path("dados", "docs", "figuras")
install.packages(c("bookdown", "bookdownplus"))
install.packages(c("bookdown", "bookdownplus"))
install.packages(c("bookdown", "bookdownplus"))
rmarkdown::pandoc_version()
system("pdflatex --version")
