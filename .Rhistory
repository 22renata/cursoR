devtools::install_github("atmoschem/veinreport")
install.packages("devtools")
devtools::install_github("atmoschem/veinreport")
install.packages(c("vein", "sf"))
install.packages("devtools")
install.packages("devtools")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("maptools")
install.packages("mapview")
install.packages("fields")
install.packages("raster")
install.packages("sp")
install.packages("rgdal")
install.packages("ncdf4")
install.packages("data.table")
install.packages("openair")
install.packages("cptcity")
install.packages("vein")
devtools::install_github("atmoschem/veinreport")
devtools::install_github("atmoschem/veinreport")
library(veinreport)
library(cptcity)
wrf <- ncdf4::nc_open("dados/met_em.d03.2016-01-10.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
download.file("https://github.com/ibarraespinosa/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf     <- nc_open("dados/met_em.nc",write=T)
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
nc_version()              # que retorna a versão da biblioteca
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- nc_open("dados/met_em.nc")
close(wrf)
class(wrf)
wrf
head(wrf)
names(wrf$var)                # print no nome de cada variavel
TEMP <- ncdf4::ncvar_get(wrf, "TT")  # escolho você picachu
class(TEMP)
ncatt_get(wrf,"TT") # ou ncatt_get(wrf,"TT",verbose = T)
dim(TEMP)
lat  <- ncvar_get(wrf, "XLAT_M")
lon  <- ncvar_get(wrf, "XLONG_M")
time <- ncvar_get(wrf, "Times")
wrf     <- nc_open("dados/met_em.nc", write=TRUE)
getwd()
nc_close("dados/met_em.nc"
)
nc_close(wrf)
wrf <- ncdf4::nc_open("dados/met_em.nc")
download.file("https://github.com/ibarraespinosa/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf
wrf <- ncdf4::nc_open("dados/met_emnc")
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf
wrf <- ncdf4::nc_open("dados/met_em.nc")
#install.packages("ncdf4") # instala o pacote
library("ncdf4")          # carrega o pacote
nc_version()              # que retorna a versão da biblioteca
wrf <- ncdf4::nc_open("dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc", verbose = T)
wrf <- nc_open("dados/met_em.nc", verbose = T)
download.file("https://github.com/iagdevs/cursoR/raw/master/dados/met_em.d03.2016-01-10.nc",
destfile = "dados/met_em.nc")
wrf <- ncdf4::nc_open("dados/met_em.nc", verbose = T)
wrf <- ncdf4::nc_open(filename = "dados/met_em.nc", verbose = T)
Sys.info()
sessionInfo()
library(ncdf4)
wrf <- readRDS(file.choose())
wrf <- readRDS("~/CURSOS/cursoR/dados/wrf.rds")
wrf
devtools::install_github("atmoschem/veinreport")
args(readBin)
.Platform$OS.type
args(readBin)
.Platform$endian
?readBin
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 2)
head(l1)
dims(l1)
dim(l1)
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*10,
size = 2)
head(l1)
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 4)
l1
# Ler o arquivo binário
l1 <- readBin("dados/gs.140422.1900g.ch4",
what="int",
n = 1349*1613,
size = 2)
l2
l
l1
1349*1613
.Platform$endian
image(l1, col = cpt(find_cpt("sat")[12]))
#image(l1, col = cpt(find_cpt("sat")[12]))
plot(l1)
# :(
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
head(l2)
head(l2, 5)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura de brilho")
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
library("cpt")
image(l2,
col = cptcity::cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
library(cptcity)   # Para escolher facilmente uma paleta de cores legal.
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
```{r}
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
library(cptcity)   # Para escolher facilmente uma paleta de cores legal.
class(l1)
l2 <- matrix(l1, ncol=1613, nrow=1349)
class(l2)
image(l2,
col = cpt(find_cpt("sat")[12]),
main = "Temperatura_de_brilho")
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
```{r}
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
l3 <- raster::raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
l3 <- (t(l2[1:1349,1:1613]),
l3 <- (t(l2[1:1349,1:1613])
)
class(l3)
image(l3)
l3 <- (t(l2[1:1613, 1:1349]))
l3 <- t(l2[1:1349,1:1613])
class(l3)
image(l3)
?t
dimnames(l3)
dimnames(l2)
dimnames(l1)
r <- raster(nrow=18, ncol=36)
r[] <- 1:ncell(r)
rt <- t(r)
rt
r
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
l3
l3 <- raster((l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613) ,
crs = CRS("+init=epsg:4326"))
sp::spplot(((l3 + 75)/100)-273, # http://www.cpc.ncep.noaa.gov/products/global_precip/html/README
col.regions = cpt(find_cpt("sat")[8]),
at = seq(-80,0,1),
main = "Temperatura de brilho (ºC)")
?t
a <- matrix(1:30, 5, 6)
ta <- t(a) ##-- i.e.,  a[i, j] == ta[j, i] for all i,j :
for(j in seq(ncol(a)))
if(! all(a[, j] == ta[j, ])) stop("wrong transpose")
a
ta
l3 <-t(l2[1:1349,1:1613])
image(l3)
l3
l3 <- raster(t(l2[1:1349,1:1613]))
l3
plot(l3)
library(raster)
l3 <- raster(t(l2[1:1349,1:1613]),
xmn=-82.00,
ymn=-44.96,
xmx=-82.0  + (0.03593245*1349),
ymx=-44.96 + (0.03593245*1613),
crs = CRS("+init=epsg:4326"))
class(l3)
